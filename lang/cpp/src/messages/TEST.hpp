// File lang/cpp/src/messages/TEST.hpp
// Auto-generated by pyUBX generateCPP.py v0.1 on 2023-04-08T18:03:13.558727
// See https://github.com/mayeranalytics/pyUBX
// DO NOT MODIFY THIS FILE!

#ifndef __TEST_H__
#define __TEST_H__
#include "Ubx.hpp"

/* Message class TEST.
 */
namespace ubx
{
namespace TEST {

constexpr uint8_t classID = 255;

/* to test
 */
struct __attribute__((packed)) TEST : public SerializeCommon
{
    uint16_t repeatedLen; /* Set N-count array dimension of repeated structure. Do not serialize this byte*/
    static const uint16_t repeatedSize;
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 255;

    struct __attribute__((packed)) _data {
        uint8_t first;
        uint8_t second;

        struct __attribute__((packed)) _repeated {
            uint16_t ext;
        } repeated [0]; /* [0] -> to pass compilation. Length is set by repeatedLen. Do not forget alloc enough space*/

    } data;
};

} // namespace TEST
} // namespace ubx
#endif // ifndef __TEST_H__
