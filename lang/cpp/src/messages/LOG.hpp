// File lang/cpp/src/messages/LOG.hpp
// Auto-generated by pyUBX generateCPP.py v0.2 on 2023-06-07T12:40:39.301002
// See https://github.com/mayeranalytics/pyUBX
// DO NOT MODIFY THIS FILE!

#ifndef __LOG_H__
#define __LOG_H__
#include "Ubx.hpp"

/* Logging Messages: i.e. Log creation, deletion, info and retrieval
 */
namespace ubx
{
namespace LOG {

constexpr uint8_t classID = 33;


#define LOG_CREATE_LOGCFG_CIRCULAR_OFFSET (0)
#define LOG_CREATE_LOGCFG_CIRCULAR_MASK (1)
/* 32.14.2.1 Create log file
 */
struct __attribute__((packed)) CREATE : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 7;

    struct __attribute__((packed)) _data {
        uint8_t version;
        uint8_t logCfg;
        uint8_t reserved1;
        uint8_t logSize;
        uint32_t userDefinedSize;

        enum _logSize_allowed{
            allowed_logSize_maximum_safe_size=0,
            allowed_logSize_minimum_size=1,
            allowed_logSize_user_defined_size=2,
        };

        void logCfg_circular(uint8_t val);
        uint8_t logCfg_circular() const;
    } data;
};

/* 32.14.3.1 Erase logged data
 */
struct __attribute__((packed)) ERASE : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 3;

    struct __attribute__((packed)) _data {

    } data;
};

/* 32.14.4.1 Find index of a log entry based on a given time
 */
struct __attribute__((packed)) FINDTIME : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 14;

    struct __attribute__((packed)) _data {
        uint8_t version;
        uint8_t type;
        uint16_t year;
        uint8_t month;
        uint8_t day;
        uint8_t hour;
        uint8_t minute;
        uint8_t second;
        uint8_t reserved1;

        enum _version_allowed{
            allowed_version_this_version=0,
        };
        enum _type_allowed{
            allowed_type_request=0,
        };
    } data;
};

struct __attribute__((packed)) FINDTIME_GET : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 14;

    struct __attribute__((packed)) _data {
        uint8_t version;
        uint8_t type;
        uint16_t reserved1;
        uint32_t entryNumber;

    } data;
};

/* 32.14.5.1 Poll for log information
 */
struct __attribute__((packed)) INFO : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 8;

    struct __attribute__((packed)) _data {

    } data;
};


#define LOG_INFO_GET_STATUS_RECORDING_OFFSET (3)
#define LOG_INFO_GET_STATUS_RECORDING_MASK (8)
#define LOG_INFO_GET_STATUS_INACTIVE_OFFSET (4)
#define LOG_INFO_GET_STATUS_INACTIVE_MASK (16)
#define LOG_INFO_GET_STATUS_CIRCULAR_OFFSET (5)
#define LOG_INFO_GET_STATUS_CIRCULAR_MASK (32)
/* 32.14.5.2 Log information
 */
struct __attribute__((packed)) INFO_GET : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 8;

    struct __attribute__((packed)) _data {
        uint8_t version;
        uint8_t reserved1[3];
        uint32_t filestoreCapacity;
        uint8_t reserved2[8];
        uint32_t currentMaxLogSize;
        uint32_t currentLogSize;
        uint32_t entryCount;
        uint16_t oldestYear;
        uint8_t oldestMonth;
        uint8_t oldestDay;
        uint8_t oldestHour;
        uint8_t oldestMinute;
        uint8_t oldestSecond;
        uint8_t reserved3;
        uint16_t newestYear;
        uint8_t newestMonth;
        uint8_t newestDay;
        uint8_t newestHour;
        uint8_t newestMinute;
        uint8_t newestSecond;
        uint8_t reserved4;
        uint8_t status;
        uint8_t reserved5[3];


        void status_recording(uint8_t val);
        uint8_t status_recording() const;
        void status_inactive(uint8_t val);
        uint8_t status_inactive() const;
        void status_circular(uint8_t val);
        uint8_t status_circular() const;
    } data;
};

/* 32.14.10.1 Request log data
 */
struct __attribute__((packed)) RETRIEVE : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 9;

    struct __attribute__((packed)) _data {
        uint32_t startNumber;
        uint32_t entryCount;
        uint8_t version;
        uint8_t reserved1[3];

        enum _version_allowed{
            allowed_version_this_version=0,
        };
    } data;
};

/* 32.14.7.1 Odometer log entry
 */
struct __attribute__((packed)) RETRIEVEPOS : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 11;

    struct __attribute__((packed)) _data {
        uint32_t entryIndex;
        int32_t lon;
        int32_t lat;
        int32_t hMSL;
        uint32_t hAcc;
        uint32_t gSpeed;
        uint32_t heading;
        uint8_t version;
        uint8_t fixType;
        uint16_t year;
        uint8_t month;
        uint8_t day;
        uint8_t hour;
        uint8_t minute;
        uint8_t second;
        uint8_t reserved1;
        uint8_t numSV;
        uint8_t reserved2;

    } data;
};

/* 32.14.8.1 Position fix log entry
 */
struct __attribute__((packed)) RETRIEVEPOSEXTRA : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 15;

    struct __attribute__((packed)) _data {
        uint32_t entryIndex;
        uint8_t version;
        uint8_t reserved1;
        uint16_t year;
        uint8_t month;
        uint8_t day;
        uint8_t hour;
        uint8_t minute;
        uint8_t second;
        uint8_t reserved2[3];
        uint32_t distance;
        uint8_t reserved3[12];

        enum _version_allowed{
            allowed_version_this_version=0,
        };
    } data;
};

} // namespace LOG
} // namespace ubx
#endif // ifndef __LOG_H__
