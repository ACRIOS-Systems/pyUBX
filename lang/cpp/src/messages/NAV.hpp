// File lang/cpp/src/messages/NAV.hpp
// Auto-generated by pyUBX generateCPP.py v0.1 on 2023-04-08T18:03:13.554630
// See https://github.com/mayeranalytics/pyUBX
// DO NOT MODIFY THIS FILE!

#ifndef __NAV_H__
#define __NAV_H__
#include "Ubx.hpp"

/* Message class NAV.
 */
namespace ubx
{
namespace NAV {

constexpr uint8_t classID = 1;

struct __attribute__((packed)) DOP : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 4;

    struct __attribute__((packed)) _data {
        uint32_t iTOW;
        uint16_t gDOP;
        uint16_t pDOP;
        uint16_t tDOP;
        uint16_t vDOP;
        uint16_t hDOP;
        uint16_t nDOP;
        uint16_t eDOP;

    } data;
};

/* 32.17.17.1 Navigation position velocity time solution
 */
struct __attribute__((packed)) PVT : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 7;

    struct __attribute__((packed)) _data {

    } data;
};


#define NAV_PVT_GET_VALID_VALIDDATE_OFFSET (0)
#define NAV_PVT_GET_VALID_VALIDDATE_MASK (1)
#define NAV_PVT_GET_VALID_VALIDTIME_OFFSET (1)
#define NAV_PVT_GET_VALID_VALIDTIME_MASK (2)
#define NAV_PVT_GET_VALID_FULLYRESOLVED_OFFSET (2)
#define NAV_PVT_GET_VALID_FULLYRESOLVED_MASK (4)
#define NAV_PVT_GET_VALID_VALIDMAG_OFFSET (3)
#define NAV_PVT_GET_VALID_VALIDMAG_MASK (8)

#define NAV_PVT_GET_FLAGS_GNSSFIXOK_OFFSET (0)
#define NAV_PVT_GET_FLAGS_GNSSFIXOK_MASK (1)
#define NAV_PVT_GET_FLAGS_DIFFSOLN_OFFSET (1)
#define NAV_PVT_GET_FLAGS_DIFFSOLN_MASK (2)
#define NAV_PVT_GET_FLAGS_PSMSTATE_OFFSET (2)
#define NAV_PVT_GET_FLAGS_PSMSTATE_MASK (28)
#define NAV_PVT_GET_FLAGS_HEADVEHVALID_OFFSET (5)
#define NAV_PVT_GET_FLAGS_HEADVEHVALID_MASK (32)
#define NAV_PVT_GET_FLAGS_CARRSOLN_OFFSET (6)
#define NAV_PVT_GET_FLAGS_CARRSOLN_MASK (192)

#define NAV_PVT_GET_FLAGS2_CONFIRMEDAVAI_OFFSET (5)
#define NAV_PVT_GET_FLAGS2_CONFIRMEDAVAI_MASK (32)
#define NAV_PVT_GET_FLAGS2_CONFIRMEDDATE_OFFSET (6)
#define NAV_PVT_GET_FLAGS2_CONFIRMEDDATE_MASK (64)
#define NAV_PVT_GET_FLAGS2_CONFIRMEDTIME_OFFSET (7)
#define NAV_PVT_GET_FLAGS2_CONFIRMEDTIME_MASK (128)

#define NAV_PVT_GET_FLAGS3_INVALIDLLH_OFFSET (0)
#define NAV_PVT_GET_FLAGS3_INVALIDLLH_MASK (1)
#define NAV_PVT_GET_FLAGS3_LASTCORRECTIONAGE_OFFSET (1)
#define NAV_PVT_GET_FLAGS3_LASTCORRECTIONAGE_MASK (30)
/* 32.17.17.1 Navigation position velocity time solution
 */
struct __attribute__((packed)) PVT_GET : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 7;

    struct __attribute__((packed)) _data {
        uint32_t iTOW;
        uint16_t year;
        uint8_t month;
        uint8_t day;
        uint8_t hour;
        uint8_t min;
        uint8_t sec;
        uint8_t valid;
        uint32_t tAcc;
        int32_t nano;
        uint8_t fixType;
        uint8_t flags;
        uint8_t flags2;
        uint8_t numSV;
        int32_t lon;
        int32_t lat;
        int32_t height;
        int32_t hMSL;
        uint32_t hAcc;
        uint32_t vAcc;
        int32_t velN;
        int32_t velE;
        int32_t velD;
        int32_t gSpeed;
        int32_t headMot;
        uint32_t sAcc;
        uint32_t headAcc;
        uint16_t pDOP;
        uint16_t flags3;
        uint32_t reserved1;
        int32_t headVeh;
        int16_t magDec;
        uint16_t magAcc;

        enum _fixType_allowed{
            allowed_fixType_no_fix=0,
            allowed_fixType_dead_reckoning_only=1,
            allowed_fixType_2D_fix=2,
            allowed_fixType_3D_fix=3,
            allowed_fixType_GNSS_and_dead_reckoning_combined=4,
            allowed_fixType_time_only_fix=5,
        };
        enum _flags_allowed{
            allowed_flags_carrSoln_no_phase=0,
            allowed_flags_carrSoln_floating_ambiguities=1,
            allowed_flags_carrSoln_fixed_ambiguities=2,
        };
        enum _flags3_allowed{
            allowed_flags3_lastCorrectionAge_NA=0,
            allowed_flags3_lastCorrectionAge_0_1=1,
            allowed_flags3_lastCorrectionAge_1_2=2,
            allowed_flags3_lastCorrectionAge_2_5=3,
            allowed_flags3_lastCorrectionAge_5_10=4,
            allowed_flags3_lastCorrectionAge_10_15=5,
            allowed_flags3_lastCorrectionAge_15_20=6,
            allowed_flags3_lastCorrectionAge_20_30=7,
            allowed_flags3_lastCorrectionAge_30_45=8,
            allowed_flags3_lastCorrectionAge_45_60=9,
            allowed_flags3_lastCorrectionAge_60_90=10,
            allowed_flags3_lastCorrectionAge_90_120=11,
            allowed_flags3_lastCorrectionAge_120_=12,
        };

        void valid_validDate(uint8_t val);
        uint8_t valid_validDate() const;
        void valid_validTime(uint8_t val);
        uint8_t valid_validTime() const;
        void valid_fullyResolved(uint8_t val);
        uint8_t valid_fullyResolved() const;
        void valid_validMag(uint8_t val);
        uint8_t valid_validMag() const;

        void flags_gnssFixOK(uint8_t val);
        uint8_t flags_gnssFixOK() const;
        void flags_diffSoln(uint8_t val);
        uint8_t flags_diffSoln() const;
        void flags_psmState(uint8_t val);
        uint8_t flags_psmState() const;
        void flags_headVehValid(uint8_t val);
        uint8_t flags_headVehValid() const;
        void flags_carrSoln(uint8_t val);
        uint8_t flags_carrSoln() const;

        void flags2_confirmedAvai(uint8_t val);
        uint8_t flags2_confirmedAvai() const;
        void flags2_confirmedDate(uint8_t val);
        uint8_t flags2_confirmedDate() const;
        void flags2_confirmedTime(uint8_t val);
        uint8_t flags2_confirmedTime() const;

        void flags3_invalidLlh(uint8_t val);
        uint8_t flags3_invalidLlh() const;
        void flags3_lastCorrectionAge(uint8_t val);
        uint8_t flags3_lastCorrectionAge() const;
    } data;
};

struct __attribute__((packed)) RELPOSNED : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 60;

    struct __attribute__((packed)) _data {
        uint8_t version;
        uint8_t reserved1;
        uint16_t refStationID;
        uint32_t iTOW;
        int32_t relPosN;
        int32_t relPosE;
        int32_t relPosD;
        int32_t relPosLength;
        int32_t relPosHeading;
        uint32_t reserved2;
        int8_t relPosHPN;
        int8_t relPosHPE;
        int8_t relPosHPD;
        int8_t relPosHPLength;
        uint32_t accN;
        uint32_t accE;
        uint32_t accD;
        uint32_t accLength;
        uint32_t accHeading;
        uint32_t reserved3;
        uint32_t flags;

    } data;
};

/* 32.17.20.1 Satellite information
 */
struct __attribute__((packed)) SAT : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 53;

    struct __attribute__((packed)) _data {

    } data;
};


#define NAV_SAT_GET_REPEATED_FLAGS_QUALITYIND_OFFSET (0)
#define NAV_SAT_GET_REPEATED_FLAGS_QUALITYIND_MASK (7)
#define NAV_SAT_GET_REPEATED_FLAGS_SVUSED_OFFSET (3)
#define NAV_SAT_GET_REPEATED_FLAGS_SVUSED_MASK (8)
#define NAV_SAT_GET_REPEATED_FLAGS_HEALTH_OFFSET (4)
#define NAV_SAT_GET_REPEATED_FLAGS_HEALTH_MASK (48)
#define NAV_SAT_GET_REPEATED_FLAGS_DIFFCORR_OFFSET (6)
#define NAV_SAT_GET_REPEATED_FLAGS_DIFFCORR_MASK (64)
#define NAV_SAT_GET_REPEATED_FLAGS_SMOOTHED_OFFSET (7)
#define NAV_SAT_GET_REPEATED_FLAGS_SMOOTHED_MASK (128)
#define NAV_SAT_GET_REPEATED_FLAGS_ORBITSOURCE_OFFSET (8)
#define NAV_SAT_GET_REPEATED_FLAGS_ORBITSOURCE_MASK (1792)
#define NAV_SAT_GET_REPEATED_FLAGS_EPHAVAIL_OFFSET (11)
#define NAV_SAT_GET_REPEATED_FLAGS_EPHAVAIL_MASK (2048)
#define NAV_SAT_GET_REPEATED_FLAGS_ALMAVAIL_OFFSET (12)
#define NAV_SAT_GET_REPEATED_FLAGS_ALMAVAIL_MASK (4096)
#define NAV_SAT_GET_REPEATED_FLAGS_ANOAVAIL_OFFSET (13)
#define NAV_SAT_GET_REPEATED_FLAGS_ANOAVAIL_MASK (8192)
#define NAV_SAT_GET_REPEATED_FLAGS_AOPAVAIL_OFFSET (14)
#define NAV_SAT_GET_REPEATED_FLAGS_AOPAVAIL_MASK (16384)
#define NAV_SAT_GET_REPEATED_FLAGS_SBASCORRUSED_OFFSET (16)
#define NAV_SAT_GET_REPEATED_FLAGS_SBASCORRUSED_MASK (65536)
#define NAV_SAT_GET_REPEATED_FLAGS_RTCMCORRUSED_OFFSET (17)
#define NAV_SAT_GET_REPEATED_FLAGS_RTCMCORRUSED_MASK (131072)
#define NAV_SAT_GET_REPEATED_FLAGS_SLASCORRUSED_OFFSET (18)
#define NAV_SAT_GET_REPEATED_FLAGS_SLASCORRUSED_MASK (262144)
#define NAV_SAT_GET_REPEATED_FLAGS_SPARTNCORRUSED_OFFSET (19)
#define NAV_SAT_GET_REPEATED_FLAGS_SPARTNCORRUSED_MASK (524288)
#define NAV_SAT_GET_REPEATED_FLAGS_PRCORRUSED_OFFSET (20)
#define NAV_SAT_GET_REPEATED_FLAGS_PRCORRUSED_MASK (1048576)
#define NAV_SAT_GET_REPEATED_FLAGS_CRCORRUSED_OFFSET (21)
#define NAV_SAT_GET_REPEATED_FLAGS_CRCORRUSED_MASK (2097152)
#define NAV_SAT_GET_REPEATED_FLAGS_DOCORRUSED_OFFSET (22)
#define NAV_SAT_GET_REPEATED_FLAGS_DOCORRUSED_MASK (4194304)
#define NAV_SAT_GET_REPEATED_FLAGS_CLASCORRUSED_OFFSET (23)
#define NAV_SAT_GET_REPEATED_FLAGS_CLASCORRUSED_MASK (8388608)
/* 32.17.20.1 Satellite information
 */
struct __attribute__((packed)) SAT_GET : public SerializeCommon
{
    uint16_t repeatedLen; /* Set N-count array dimension of repeated structure. Do not serialize this byte*/
    static const uint16_t repeatedSize;
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 53;

    struct __attribute__((packed)) _data {
        uint32_t iTOW;
        uint8_t version;
        uint8_t numSvs;
        uint16_t reserved0;

        struct __attribute__((packed)) _repeated {
            uint8_t gnssId;
            uint8_t svId;
            uint8_t cno;
            int8_t elev;
            int16_t azim;
            int16_t prRes;
            uint32_t flags;
        } repeated [0]; /* [0] -> to pass compilation. Length is set by repeatedLen. Do not forget alloc enough space*/

        enum _version_allowed{
            allowed_version_this_version=1,
        };
        enum _repeated_gnssId_allowed{
            allowed_repeated_gnssId_GPS=0,
            allowed_repeated_gnssId_SBAS=1,
            allowed_repeated_gnssId_Galileo=2,
            allowed_repeated_gnssId_BeiDou=3,
            allowed_repeated_gnssId_IMES=4,
            allowed_repeated_gnssId_QZSS=5,
            allowed_repeated_gnssId_GLONASS=6,
        };

        void repeated_flags_qualityInd(uint8_t val, uint8_t n);
        uint8_t repeated_flags_qualityInd(uint8_t n) const;
        void repeated_flags_svUsed(uint8_t val, uint8_t n);
        uint8_t repeated_flags_svUsed(uint8_t n) const;
        void repeated_flags_health(uint8_t val, uint8_t n);
        uint8_t repeated_flags_health(uint8_t n) const;
        void repeated_flags_diffCorr(uint8_t val, uint8_t n);
        uint8_t repeated_flags_diffCorr(uint8_t n) const;
        void repeated_flags_smoothed(uint8_t val, uint8_t n);
        uint8_t repeated_flags_smoothed(uint8_t n) const;
        void repeated_flags_orbitSource(uint8_t val, uint8_t n);
        uint8_t repeated_flags_orbitSource(uint8_t n) const;
        void repeated_flags_ephAvail(uint8_t val, uint8_t n);
        uint8_t repeated_flags_ephAvail(uint8_t n) const;
        void repeated_flags_almAvail(uint8_t val, uint8_t n);
        uint8_t repeated_flags_almAvail(uint8_t n) const;
        void repeated_flags_anoAvail(uint8_t val, uint8_t n);
        uint8_t repeated_flags_anoAvail(uint8_t n) const;
        void repeated_flags_aopAvail(uint8_t val, uint8_t n);
        uint8_t repeated_flags_aopAvail(uint8_t n) const;
        void repeated_flags_sbasCorrUsed(uint8_t val, uint8_t n);
        uint8_t repeated_flags_sbasCorrUsed(uint8_t n) const;
        void repeated_flags_rtcmCorrUsed(uint8_t val, uint8_t n);
        uint8_t repeated_flags_rtcmCorrUsed(uint8_t n) const;
        void repeated_flags_slasCorrUsed(uint8_t val, uint8_t n);
        uint8_t repeated_flags_slasCorrUsed(uint8_t n) const;
        void repeated_flags_spartnCorrUsed(uint8_t val, uint8_t n);
        uint8_t repeated_flags_spartnCorrUsed(uint8_t n) const;
        void repeated_flags_prCorrUsed(uint8_t val, uint8_t n);
        uint8_t repeated_flags_prCorrUsed(uint8_t n) const;
        void repeated_flags_crCorrUsed(uint8_t val, uint8_t n);
        uint8_t repeated_flags_crCorrUsed(uint8_t n) const;
        void repeated_flags_doCorrUsed(uint8_t val, uint8_t n);
        uint8_t repeated_flags_doCorrUsed(uint8_t n) const;
        void repeated_flags_clasCorrUsed(uint8_t val, uint8_t n);
        uint8_t repeated_flags_clasCorrUsed(uint8_t n) const;
    } data;
};

struct __attribute__((packed)) SVINFO : public SerializeCommon
{
    uint16_t repeatedLen; /* Set N-count array dimension of repeated structure. Do not serialize this byte*/
    static const uint16_t repeatedSize;
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 48;

    struct __attribute__((packed)) _data {
        uint32_t iTOW;
        uint8_t numCh;
        uint8_t globalFlags;
        uint16_t reserved1;

        struct __attribute__((packed)) _repeated {
            uint8_t chn;
            uint8_t svid;
            uint8_t flags;
            uint8_t quality;
            uint8_t cno;
            int8_t elev;
            int16_t axim;
            int32_t prRes;
        } repeated [0]; /* [0] -> to pass compilation. Length is set by repeatedLen. Do not forget alloc enough space*/

        enum _globalFlags_allowed{
            allowed_globalFlags_Antaris=0,
            allowed_globalFlags_u_Blox_5=1,
            allowed_globalFlags_u_Blox_6=2,
            allowed_globalFlags_u_Blox_7=3,
            allowed_globalFlags_u_Blox_8=4,
        };
    } data;
};

} // namespace NAV
} // namespace ubx
#endif // ifndef __NAV_H__
