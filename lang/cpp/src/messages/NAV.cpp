// File lang/cpp/src/messages/NAV.cpp
// Auto-generated by pyUBX generateCPP.py v0.2 on 2023-06-07T12:40:39.306677
// See https://github.com/mayeranalytics/pyUBX
// DO NOT MODIFY THIS FILE!

 #include "NAV.hpp"
#include <sstream>

const std::string classIDName("NAV");

uint8_t ubx::NAV::DOP::getClassId(void) const { return ubx::NAV::classID; }
uint8_t ubx::NAV::DOP::getMessageId(void) const { return messageID; }
const std::string &ubx::NAV::DOP::getClassName(void) const { return classIDName; }
std::string ubx::NAV::DOP::getMessageName(void) const { return std::string("DOP"); };
std::string ubx::NAV::DOP::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"iTOW\":" << std::to_string(data.iTOW) << ", \"gDOP\":" << std::to_string(data.gDOP) << ", \"pDOP\":" << std::to_string(data.pDOP) << ", \"tDOP\":" << std::to_string(data.tDOP) << ", \"vDOP\":" << std::to_string(data.vDOP) << ", \"hDOP\":" << std::to_string(data.hDOP) << ", \"nDOP\":" << std::to_string(data.nDOP) << ", \"eDOP\":" << std::to_string(data.eDOP);
    ret << "}";
    return ret.str();
}
uint8_t* ubx::NAV::DOP::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::NAV::DOP::getDataSize(void) const { return sizeof(data); }
uint8_t ubx::NAV::PVT::getClassId(void) const { return ubx::NAV::classID; }
uint8_t ubx::NAV::PVT::getMessageId(void) const { return messageID; }
const std::string &ubx::NAV::PVT::getClassName(void) const { return classIDName; }
std::string ubx::NAV::PVT::getMessageName(void) const { return std::string("PVT"); };
std::string ubx::NAV::PVT::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << "}";
    return ret.str();
}
uint8_t* ubx::NAV::PVT::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::NAV::PVT::getDataSize(void) const { return 0; }
uint8_t ubx::NAV::PVT_GET::getClassId(void) const { return ubx::NAV::classID; }
uint8_t ubx::NAV::PVT_GET::getMessageId(void) const { return messageID; }
const std::string &ubx::NAV::PVT_GET::getClassName(void) const { return classIDName; }
std::string ubx::NAV::PVT_GET::getMessageName(void) const { return std::string("PVT_GET"); };
std::string ubx::NAV::PVT_GET::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"iTOW\":" << std::to_string(data.iTOW) << ", \"year\":" << std::to_string(data.year) << ", \"month\":" << std::to_string(data.month) << ", \"day\":" << std::to_string(data.day) << ", \"hour\":" << std::to_string(data.hour) << ", \"min\":" << std::to_string(data.min) << ", \"sec\":" << std::to_string(data.sec) << ", \"valid\":" << std::to_string(data.valid) << ", \"_valid\":{\"validDate\":" << std::to_string(data.valid_validDate()) << ", \"validTime\":" << std::to_string(data.valid_validTime()) << ", \"fullyResolved\":" << std::to_string(data.valid_fullyResolved()) << ", \"validMag\":" << std::to_string(data.valid_validMag()) << "}" << ", \"tAcc\":" << std::to_string(data.tAcc) << ", \"nano\":" << std::to_string(data.nano) << ", \"fixType\":" << std::to_string(data.fixType) << ", \"flags\":" << std::to_string(data.flags) << ", \"_flags\":{\"gnssFixOK\":" << std::to_string(data.flags_gnssFixOK()) << ", \"diffSoln\":" << std::to_string(data.flags_diffSoln()) << ", \"psmState\":" << std::to_string(data.flags_psmState()) << ", \"headVehValid\":" << std::to_string(data.flags_headVehValid()) << ", \"carrSoln\":" << std::to_string(data.flags_carrSoln()) << "}" << ", \"flags2\":" << std::to_string(data.flags2) << ", \"_flags2\":{\"confirmedAvai\":" << std::to_string(data.flags2_confirmedAvai()) << ", \"confirmedDate\":" << std::to_string(data.flags2_confirmedDate()) << ", \"confirmedTime\":" << std::to_string(data.flags2_confirmedTime()) << "}" << ", \"numSV\":" << std::to_string(data.numSV) << ", \"lon\":" << std::to_string(data.lon) << ", \"lat\":" << std::to_string(data.lat) << ", \"height\":" << std::to_string(data.height) << ", \"hMSL\":" << std::to_string(data.hMSL) << ", \"hAcc\":" << std::to_string(data.hAcc) << ", \"vAcc\":" << std::to_string(data.vAcc) << ", \"velN\":" << std::to_string(data.velN) << ", \"velE\":" << std::to_string(data.velE) << ", \"velD\":" << std::to_string(data.velD) << ", \"gSpeed\":" << std::to_string(data.gSpeed) << ", \"headMot\":" << std::to_string(data.headMot) << ", \"sAcc\":" << std::to_string(data.sAcc) << ", \"headAcc\":" << std::to_string(data.headAcc) << ", \"pDOP\":" << std::to_string(data.pDOP) << ", \"flags3\":" << std::to_string(data.flags3) << ", \"_flags3\":{\"invalidLlh\":" << std::to_string(data.flags3_invalidLlh()) << ", \"lastCorrectionAge\":" << std::to_string(data.flags3_lastCorrectionAge()) << "}" << ", \"reserved1\":" << "0" << ", \"headVeh\":" << std::to_string(data.headVeh) << ", \"magDec\":" << std::to_string(data.magDec) << ", \"magAcc\":" << std::to_string(data.magAcc);
    ret << "}";
    return ret.str();
}
uint8_t* ubx::NAV::PVT_GET::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::NAV::PVT_GET::getDataSize(void) const { return sizeof(data); }

void ubx::NAV::PVT_GET::_data::valid_validDate(uint8_t val){ UBX_CHANGE_VAR_BIT(valid, val, NAV_PVT_GET_VALID_VALIDDATE_MASK, NAV_PVT_GET_VALID_VALIDDATE_OFFSET); }
uint8_t ubx::NAV::PVT_GET::_data::valid_validDate()const{ return UBX_GET_VAR_BIT(valid, NAV_PVT_GET_VALID_VALIDDATE_MASK, NAV_PVT_GET_VALID_VALIDDATE_OFFSET); }
void ubx::NAV::PVT_GET::_data::valid_validTime(uint8_t val){ UBX_CHANGE_VAR_BIT(valid, val, NAV_PVT_GET_VALID_VALIDTIME_MASK, NAV_PVT_GET_VALID_VALIDTIME_OFFSET); }
uint8_t ubx::NAV::PVT_GET::_data::valid_validTime()const{ return UBX_GET_VAR_BIT(valid, NAV_PVT_GET_VALID_VALIDTIME_MASK, NAV_PVT_GET_VALID_VALIDTIME_OFFSET); }
void ubx::NAV::PVT_GET::_data::valid_fullyResolved(uint8_t val){ UBX_CHANGE_VAR_BIT(valid, val, NAV_PVT_GET_VALID_FULLYRESOLVED_MASK, NAV_PVT_GET_VALID_FULLYRESOLVED_OFFSET); }
uint8_t ubx::NAV::PVT_GET::_data::valid_fullyResolved()const{ return UBX_GET_VAR_BIT(valid, NAV_PVT_GET_VALID_FULLYRESOLVED_MASK, NAV_PVT_GET_VALID_FULLYRESOLVED_OFFSET); }
void ubx::NAV::PVT_GET::_data::valid_validMag(uint8_t val){ UBX_CHANGE_VAR_BIT(valid, val, NAV_PVT_GET_VALID_VALIDMAG_MASK, NAV_PVT_GET_VALID_VALIDMAG_OFFSET); }
uint8_t ubx::NAV::PVT_GET::_data::valid_validMag()const{ return UBX_GET_VAR_BIT(valid, NAV_PVT_GET_VALID_VALIDMAG_MASK, NAV_PVT_GET_VALID_VALIDMAG_OFFSET); }

void ubx::NAV::PVT_GET::_data::flags_gnssFixOK(uint8_t val){ UBX_CHANGE_VAR_BIT(flags, val, NAV_PVT_GET_FLAGS_GNSSFIXOK_MASK, NAV_PVT_GET_FLAGS_GNSSFIXOK_OFFSET); }
uint8_t ubx::NAV::PVT_GET::_data::flags_gnssFixOK()const{ return UBX_GET_VAR_BIT(flags, NAV_PVT_GET_FLAGS_GNSSFIXOK_MASK, NAV_PVT_GET_FLAGS_GNSSFIXOK_OFFSET); }
void ubx::NAV::PVT_GET::_data::flags_diffSoln(uint8_t val){ UBX_CHANGE_VAR_BIT(flags, val, NAV_PVT_GET_FLAGS_DIFFSOLN_MASK, NAV_PVT_GET_FLAGS_DIFFSOLN_OFFSET); }
uint8_t ubx::NAV::PVT_GET::_data::flags_diffSoln()const{ return UBX_GET_VAR_BIT(flags, NAV_PVT_GET_FLAGS_DIFFSOLN_MASK, NAV_PVT_GET_FLAGS_DIFFSOLN_OFFSET); }
void ubx::NAV::PVT_GET::_data::flags_psmState(uint8_t val){ UBX_CHANGE_VAR_BIT(flags, val, NAV_PVT_GET_FLAGS_PSMSTATE_MASK, NAV_PVT_GET_FLAGS_PSMSTATE_OFFSET); }
uint8_t ubx::NAV::PVT_GET::_data::flags_psmState()const{ return UBX_GET_VAR_BIT(flags, NAV_PVT_GET_FLAGS_PSMSTATE_MASK, NAV_PVT_GET_FLAGS_PSMSTATE_OFFSET); }
void ubx::NAV::PVT_GET::_data::flags_headVehValid(uint8_t val){ UBX_CHANGE_VAR_BIT(flags, val, NAV_PVT_GET_FLAGS_HEADVEHVALID_MASK, NAV_PVT_GET_FLAGS_HEADVEHVALID_OFFSET); }
uint8_t ubx::NAV::PVT_GET::_data::flags_headVehValid()const{ return UBX_GET_VAR_BIT(flags, NAV_PVT_GET_FLAGS_HEADVEHVALID_MASK, NAV_PVT_GET_FLAGS_HEADVEHVALID_OFFSET); }
void ubx::NAV::PVT_GET::_data::flags_carrSoln(uint8_t val){ UBX_CHANGE_VAR_BIT(flags, val, NAV_PVT_GET_FLAGS_CARRSOLN_MASK, NAV_PVT_GET_FLAGS_CARRSOLN_OFFSET); }
uint8_t ubx::NAV::PVT_GET::_data::flags_carrSoln()const{ return UBX_GET_VAR_BIT(flags, NAV_PVT_GET_FLAGS_CARRSOLN_MASK, NAV_PVT_GET_FLAGS_CARRSOLN_OFFSET); }

void ubx::NAV::PVT_GET::_data::flags2_confirmedAvai(uint8_t val){ UBX_CHANGE_VAR_BIT(flags2, val, NAV_PVT_GET_FLAGS2_CONFIRMEDAVAI_MASK, NAV_PVT_GET_FLAGS2_CONFIRMEDAVAI_OFFSET); }
uint8_t ubx::NAV::PVT_GET::_data::flags2_confirmedAvai()const{ return UBX_GET_VAR_BIT(flags2, NAV_PVT_GET_FLAGS2_CONFIRMEDAVAI_MASK, NAV_PVT_GET_FLAGS2_CONFIRMEDAVAI_OFFSET); }
void ubx::NAV::PVT_GET::_data::flags2_confirmedDate(uint8_t val){ UBX_CHANGE_VAR_BIT(flags2, val, NAV_PVT_GET_FLAGS2_CONFIRMEDDATE_MASK, NAV_PVT_GET_FLAGS2_CONFIRMEDDATE_OFFSET); }
uint8_t ubx::NAV::PVT_GET::_data::flags2_confirmedDate()const{ return UBX_GET_VAR_BIT(flags2, NAV_PVT_GET_FLAGS2_CONFIRMEDDATE_MASK, NAV_PVT_GET_FLAGS2_CONFIRMEDDATE_OFFSET); }
void ubx::NAV::PVT_GET::_data::flags2_confirmedTime(uint8_t val){ UBX_CHANGE_VAR_BIT(flags2, val, NAV_PVT_GET_FLAGS2_CONFIRMEDTIME_MASK, NAV_PVT_GET_FLAGS2_CONFIRMEDTIME_OFFSET); }
uint8_t ubx::NAV::PVT_GET::_data::flags2_confirmedTime()const{ return UBX_GET_VAR_BIT(flags2, NAV_PVT_GET_FLAGS2_CONFIRMEDTIME_MASK, NAV_PVT_GET_FLAGS2_CONFIRMEDTIME_OFFSET); }

void ubx::NAV::PVT_GET::_data::flags3_invalidLlh(uint8_t val){ UBX_CHANGE_VAR_BIT(flags3, val, NAV_PVT_GET_FLAGS3_INVALIDLLH_MASK, NAV_PVT_GET_FLAGS3_INVALIDLLH_OFFSET); }
uint8_t ubx::NAV::PVT_GET::_data::flags3_invalidLlh()const{ return UBX_GET_VAR_BIT(flags3, NAV_PVT_GET_FLAGS3_INVALIDLLH_MASK, NAV_PVT_GET_FLAGS3_INVALIDLLH_OFFSET); }
void ubx::NAV::PVT_GET::_data::flags3_lastCorrectionAge(uint8_t val){ UBX_CHANGE_VAR_BIT(flags3, val, NAV_PVT_GET_FLAGS3_LASTCORRECTIONAGE_MASK, NAV_PVT_GET_FLAGS3_LASTCORRECTIONAGE_OFFSET); }
uint8_t ubx::NAV::PVT_GET::_data::flags3_lastCorrectionAge()const{ return UBX_GET_VAR_BIT(flags3, NAV_PVT_GET_FLAGS3_LASTCORRECTIONAGE_MASK, NAV_PVT_GET_FLAGS3_LASTCORRECTIONAGE_OFFSET); }
uint8_t ubx::NAV::RELPOSNED::getClassId(void) const { return ubx::NAV::classID; }
uint8_t ubx::NAV::RELPOSNED::getMessageId(void) const { return messageID; }
const std::string &ubx::NAV::RELPOSNED::getClassName(void) const { return classIDName; }
std::string ubx::NAV::RELPOSNED::getMessageName(void) const { return std::string("RELPOSNED"); };
std::string ubx::NAV::RELPOSNED::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"version\":" << std::to_string(data.version) << ", \"reserved1\":" << "0" << ", \"refStationID\":" << std::to_string(data.refStationID) << ", \"iTOW\":" << std::to_string(data.iTOW) << ", \"relPosN\":" << std::to_string(data.relPosN) << ", \"relPosE\":" << std::to_string(data.relPosE) << ", \"relPosD\":" << std::to_string(data.relPosD) << ", \"relPosLength\":" << std::to_string(data.relPosLength) << ", \"relPosHeading\":" << std::to_string(data.relPosHeading) << ", \"reserved2\":" << "0" << ", \"relPosHPN\":" << std::to_string(data.relPosHPN) << ", \"relPosHPE\":" << std::to_string(data.relPosHPE) << ", \"relPosHPD\":" << std::to_string(data.relPosHPD) << ", \"relPosHPLength\":" << std::to_string(data.relPosHPLength) << ", \"accN\":" << std::to_string(data.accN) << ", \"accE\":" << std::to_string(data.accE) << ", \"accD\":" << std::to_string(data.accD) << ", \"accLength\":" << std::to_string(data.accLength) << ", \"accHeading\":" << std::to_string(data.accHeading) << ", \"reserved3\":" << "0" << ", \"flags\":" << std::to_string(data.flags);
    ret << "}";
    return ret.str();
}
uint8_t* ubx::NAV::RELPOSNED::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::NAV::RELPOSNED::getDataSize(void) const { return sizeof(data); }
uint8_t ubx::NAV::SAT::getClassId(void) const { return ubx::NAV::classID; }
uint8_t ubx::NAV::SAT::getMessageId(void) const { return messageID; }
const std::string &ubx::NAV::SAT::getClassName(void) const { return classIDName; }
std::string ubx::NAV::SAT::getMessageName(void) const { return std::string("SAT"); };
std::string ubx::NAV::SAT::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << "}";
    return ret.str();
}
uint8_t* ubx::NAV::SAT::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::NAV::SAT::getDataSize(void) const { return 0; }
uint8_t ubx::NAV::SAT_GET::getClassId(void) const { return ubx::NAV::classID; }
uint8_t ubx::NAV::SAT_GET::getMessageId(void) const { return messageID; }
const std::string &ubx::NAV::SAT_GET::getClassName(void) const { return classIDName; }
std::string ubx::NAV::SAT_GET::getMessageName(void) const { return std::string("SAT_GET"); };
std::string ubx::NAV::SAT_GET::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"iTOW\":" << std::to_string(data.iTOW) << ", \"version\":" << std::to_string(data.version) << ", \"numSvs\":" << std::to_string(data.numSvs) << ", \"reserved0\":" << "0";
    for (uint16_t i = 0; i < repeatedLen; i++) { ret << ", \"gnssId[" << i << "]\":" << std::to_string(data.repeated[i].gnssId) << ", \"svId[" << i << "]\":" << std::to_string(data.repeated[i].svId) << ", \"cno[" << i << "]\":" << std::to_string(data.repeated[i].cno) << ", \"elev[" << i << "]\":" << std::to_string(data.repeated[i].elev) << ", \"azim[" << i << "]\":" << std::to_string(data.repeated[i].azim) << ", \"prRes[" << i << "]\":" << std::to_string(data.repeated[i].prRes) << ", \"flags[" << i << "]\":" << std::to_string(data.repeated[i].flags) << ", \"_flags\":{\"qualityInd\":" << std::to_string(data.repeated_flags_qualityInd(i)) << ", \"svUsed\":" << std::to_string(data.repeated_flags_svUsed(i)) << ", \"health\":" << std::to_string(data.repeated_flags_health(i)) << ", \"diffCorr\":" << std::to_string(data.repeated_flags_diffCorr(i)) << ", \"smoothed\":" << std::to_string(data.repeated_flags_smoothed(i)) << ", \"orbitSource\":" << std::to_string(data.repeated_flags_orbitSource(i)) << ", \"ephAvail\":" << std::to_string(data.repeated_flags_ephAvail(i)) << ", \"almAvail\":" << std::to_string(data.repeated_flags_almAvail(i)) << ", \"anoAvail\":" << std::to_string(data.repeated_flags_anoAvail(i)) << ", \"aopAvail\":" << std::to_string(data.repeated_flags_aopAvail(i)) << ", \"sbasCorrUsed\":" << std::to_string(data.repeated_flags_sbasCorrUsed(i)) << ", \"rtcmCorrUsed\":" << std::to_string(data.repeated_flags_rtcmCorrUsed(i)) << ", \"slasCorrUsed\":" << std::to_string(data.repeated_flags_slasCorrUsed(i)) << ", \"spartnCorrUsed\":" << std::to_string(data.repeated_flags_spartnCorrUsed(i)) << ", \"prCorrUsed\":" << std::to_string(data.repeated_flags_prCorrUsed(i)) << ", \"crCorrUsed\":" << std::to_string(data.repeated_flags_crCorrUsed(i)) << ", \"doCorrUsed\":" << std::to_string(data.repeated_flags_doCorrUsed(i)) << ", \"clasCorrUsed\":" << std::to_string(data.repeated_flags_clasCorrUsed(i)) << "}";}
    ret << "}";
    return ret.str();
}
uint8_t* ubx::NAV::SAT_GET::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::NAV::SAT_GET::getDataSize(void) const { return sizeof(data) + (repeatedLen * repeatedSize); }

void ubx::NAV::SAT_GET::_data::repeated_flags_qualityInd(uint8_t val, uint8_t n){ UBX_CHANGE_VAR_BIT(repeated[n].flags, val, NAV_SAT_GET_REPEATED_FLAGS_QUALITYIND_MASK, NAV_SAT_GET_REPEATED_FLAGS_QUALITYIND_OFFSET); }
uint8_t ubx::NAV::SAT_GET::_data::repeated_flags_qualityInd(uint8_t n)const{ return UBX_GET_VAR_BIT(repeated[n].flags, NAV_SAT_GET_REPEATED_FLAGS_QUALITYIND_MASK, NAV_SAT_GET_REPEATED_FLAGS_QUALITYIND_OFFSET); }
void ubx::NAV::SAT_GET::_data::repeated_flags_svUsed(uint8_t val, uint8_t n){ UBX_CHANGE_VAR_BIT(repeated[n].flags, val, NAV_SAT_GET_REPEATED_FLAGS_SVUSED_MASK, NAV_SAT_GET_REPEATED_FLAGS_SVUSED_OFFSET); }
uint8_t ubx::NAV::SAT_GET::_data::repeated_flags_svUsed(uint8_t n)const{ return UBX_GET_VAR_BIT(repeated[n].flags, NAV_SAT_GET_REPEATED_FLAGS_SVUSED_MASK, NAV_SAT_GET_REPEATED_FLAGS_SVUSED_OFFSET); }
void ubx::NAV::SAT_GET::_data::repeated_flags_health(uint8_t val, uint8_t n){ UBX_CHANGE_VAR_BIT(repeated[n].flags, val, NAV_SAT_GET_REPEATED_FLAGS_HEALTH_MASK, NAV_SAT_GET_REPEATED_FLAGS_HEALTH_OFFSET); }
uint8_t ubx::NAV::SAT_GET::_data::repeated_flags_health(uint8_t n)const{ return UBX_GET_VAR_BIT(repeated[n].flags, NAV_SAT_GET_REPEATED_FLAGS_HEALTH_MASK, NAV_SAT_GET_REPEATED_FLAGS_HEALTH_OFFSET); }
void ubx::NAV::SAT_GET::_data::repeated_flags_diffCorr(uint8_t val, uint8_t n){ UBX_CHANGE_VAR_BIT(repeated[n].flags, val, NAV_SAT_GET_REPEATED_FLAGS_DIFFCORR_MASK, NAV_SAT_GET_REPEATED_FLAGS_DIFFCORR_OFFSET); }
uint8_t ubx::NAV::SAT_GET::_data::repeated_flags_diffCorr(uint8_t n)const{ return UBX_GET_VAR_BIT(repeated[n].flags, NAV_SAT_GET_REPEATED_FLAGS_DIFFCORR_MASK, NAV_SAT_GET_REPEATED_FLAGS_DIFFCORR_OFFSET); }
void ubx::NAV::SAT_GET::_data::repeated_flags_smoothed(uint8_t val, uint8_t n){ UBX_CHANGE_VAR_BIT(repeated[n].flags, val, NAV_SAT_GET_REPEATED_FLAGS_SMOOTHED_MASK, NAV_SAT_GET_REPEATED_FLAGS_SMOOTHED_OFFSET); }
uint8_t ubx::NAV::SAT_GET::_data::repeated_flags_smoothed(uint8_t n)const{ return UBX_GET_VAR_BIT(repeated[n].flags, NAV_SAT_GET_REPEATED_FLAGS_SMOOTHED_MASK, NAV_SAT_GET_REPEATED_FLAGS_SMOOTHED_OFFSET); }
void ubx::NAV::SAT_GET::_data::repeated_flags_orbitSource(uint8_t val, uint8_t n){ UBX_CHANGE_VAR_BIT(repeated[n].flags, val, NAV_SAT_GET_REPEATED_FLAGS_ORBITSOURCE_MASK, NAV_SAT_GET_REPEATED_FLAGS_ORBITSOURCE_OFFSET); }
uint8_t ubx::NAV::SAT_GET::_data::repeated_flags_orbitSource(uint8_t n)const{ return UBX_GET_VAR_BIT(repeated[n].flags, NAV_SAT_GET_REPEATED_FLAGS_ORBITSOURCE_MASK, NAV_SAT_GET_REPEATED_FLAGS_ORBITSOURCE_OFFSET); }
void ubx::NAV::SAT_GET::_data::repeated_flags_ephAvail(uint8_t val, uint8_t n){ UBX_CHANGE_VAR_BIT(repeated[n].flags, val, NAV_SAT_GET_REPEATED_FLAGS_EPHAVAIL_MASK, NAV_SAT_GET_REPEATED_FLAGS_EPHAVAIL_OFFSET); }
uint8_t ubx::NAV::SAT_GET::_data::repeated_flags_ephAvail(uint8_t n)const{ return UBX_GET_VAR_BIT(repeated[n].flags, NAV_SAT_GET_REPEATED_FLAGS_EPHAVAIL_MASK, NAV_SAT_GET_REPEATED_FLAGS_EPHAVAIL_OFFSET); }
void ubx::NAV::SAT_GET::_data::repeated_flags_almAvail(uint8_t val, uint8_t n){ UBX_CHANGE_VAR_BIT(repeated[n].flags, val, NAV_SAT_GET_REPEATED_FLAGS_ALMAVAIL_MASK, NAV_SAT_GET_REPEATED_FLAGS_ALMAVAIL_OFFSET); }
uint8_t ubx::NAV::SAT_GET::_data::repeated_flags_almAvail(uint8_t n)const{ return UBX_GET_VAR_BIT(repeated[n].flags, NAV_SAT_GET_REPEATED_FLAGS_ALMAVAIL_MASK, NAV_SAT_GET_REPEATED_FLAGS_ALMAVAIL_OFFSET); }
void ubx::NAV::SAT_GET::_data::repeated_flags_anoAvail(uint8_t val, uint8_t n){ UBX_CHANGE_VAR_BIT(repeated[n].flags, val, NAV_SAT_GET_REPEATED_FLAGS_ANOAVAIL_MASK, NAV_SAT_GET_REPEATED_FLAGS_ANOAVAIL_OFFSET); }
uint8_t ubx::NAV::SAT_GET::_data::repeated_flags_anoAvail(uint8_t n)const{ return UBX_GET_VAR_BIT(repeated[n].flags, NAV_SAT_GET_REPEATED_FLAGS_ANOAVAIL_MASK, NAV_SAT_GET_REPEATED_FLAGS_ANOAVAIL_OFFSET); }
void ubx::NAV::SAT_GET::_data::repeated_flags_aopAvail(uint8_t val, uint8_t n){ UBX_CHANGE_VAR_BIT(repeated[n].flags, val, NAV_SAT_GET_REPEATED_FLAGS_AOPAVAIL_MASK, NAV_SAT_GET_REPEATED_FLAGS_AOPAVAIL_OFFSET); }
uint8_t ubx::NAV::SAT_GET::_data::repeated_flags_aopAvail(uint8_t n)const{ return UBX_GET_VAR_BIT(repeated[n].flags, NAV_SAT_GET_REPEATED_FLAGS_AOPAVAIL_MASK, NAV_SAT_GET_REPEATED_FLAGS_AOPAVAIL_OFFSET); }
void ubx::NAV::SAT_GET::_data::repeated_flags_sbasCorrUsed(uint8_t val, uint8_t n){ UBX_CHANGE_VAR_BIT(repeated[n].flags, val, NAV_SAT_GET_REPEATED_FLAGS_SBASCORRUSED_MASK, NAV_SAT_GET_REPEATED_FLAGS_SBASCORRUSED_OFFSET); }
uint8_t ubx::NAV::SAT_GET::_data::repeated_flags_sbasCorrUsed(uint8_t n)const{ return UBX_GET_VAR_BIT(repeated[n].flags, NAV_SAT_GET_REPEATED_FLAGS_SBASCORRUSED_MASK, NAV_SAT_GET_REPEATED_FLAGS_SBASCORRUSED_OFFSET); }
void ubx::NAV::SAT_GET::_data::repeated_flags_rtcmCorrUsed(uint8_t val, uint8_t n){ UBX_CHANGE_VAR_BIT(repeated[n].flags, val, NAV_SAT_GET_REPEATED_FLAGS_RTCMCORRUSED_MASK, NAV_SAT_GET_REPEATED_FLAGS_RTCMCORRUSED_OFFSET); }
uint8_t ubx::NAV::SAT_GET::_data::repeated_flags_rtcmCorrUsed(uint8_t n)const{ return UBX_GET_VAR_BIT(repeated[n].flags, NAV_SAT_GET_REPEATED_FLAGS_RTCMCORRUSED_MASK, NAV_SAT_GET_REPEATED_FLAGS_RTCMCORRUSED_OFFSET); }
void ubx::NAV::SAT_GET::_data::repeated_flags_slasCorrUsed(uint8_t val, uint8_t n){ UBX_CHANGE_VAR_BIT(repeated[n].flags, val, NAV_SAT_GET_REPEATED_FLAGS_SLASCORRUSED_MASK, NAV_SAT_GET_REPEATED_FLAGS_SLASCORRUSED_OFFSET); }
uint8_t ubx::NAV::SAT_GET::_data::repeated_flags_slasCorrUsed(uint8_t n)const{ return UBX_GET_VAR_BIT(repeated[n].flags, NAV_SAT_GET_REPEATED_FLAGS_SLASCORRUSED_MASK, NAV_SAT_GET_REPEATED_FLAGS_SLASCORRUSED_OFFSET); }
void ubx::NAV::SAT_GET::_data::repeated_flags_spartnCorrUsed(uint8_t val, uint8_t n){ UBX_CHANGE_VAR_BIT(repeated[n].flags, val, NAV_SAT_GET_REPEATED_FLAGS_SPARTNCORRUSED_MASK, NAV_SAT_GET_REPEATED_FLAGS_SPARTNCORRUSED_OFFSET); }
uint8_t ubx::NAV::SAT_GET::_data::repeated_flags_spartnCorrUsed(uint8_t n)const{ return UBX_GET_VAR_BIT(repeated[n].flags, NAV_SAT_GET_REPEATED_FLAGS_SPARTNCORRUSED_MASK, NAV_SAT_GET_REPEATED_FLAGS_SPARTNCORRUSED_OFFSET); }
void ubx::NAV::SAT_GET::_data::repeated_flags_prCorrUsed(uint8_t val, uint8_t n){ UBX_CHANGE_VAR_BIT(repeated[n].flags, val, NAV_SAT_GET_REPEATED_FLAGS_PRCORRUSED_MASK, NAV_SAT_GET_REPEATED_FLAGS_PRCORRUSED_OFFSET); }
uint8_t ubx::NAV::SAT_GET::_data::repeated_flags_prCorrUsed(uint8_t n)const{ return UBX_GET_VAR_BIT(repeated[n].flags, NAV_SAT_GET_REPEATED_FLAGS_PRCORRUSED_MASK, NAV_SAT_GET_REPEATED_FLAGS_PRCORRUSED_OFFSET); }
void ubx::NAV::SAT_GET::_data::repeated_flags_crCorrUsed(uint8_t val, uint8_t n){ UBX_CHANGE_VAR_BIT(repeated[n].flags, val, NAV_SAT_GET_REPEATED_FLAGS_CRCORRUSED_MASK, NAV_SAT_GET_REPEATED_FLAGS_CRCORRUSED_OFFSET); }
uint8_t ubx::NAV::SAT_GET::_data::repeated_flags_crCorrUsed(uint8_t n)const{ return UBX_GET_VAR_BIT(repeated[n].flags, NAV_SAT_GET_REPEATED_FLAGS_CRCORRUSED_MASK, NAV_SAT_GET_REPEATED_FLAGS_CRCORRUSED_OFFSET); }
void ubx::NAV::SAT_GET::_data::repeated_flags_doCorrUsed(uint8_t val, uint8_t n){ UBX_CHANGE_VAR_BIT(repeated[n].flags, val, NAV_SAT_GET_REPEATED_FLAGS_DOCORRUSED_MASK, NAV_SAT_GET_REPEATED_FLAGS_DOCORRUSED_OFFSET); }
uint8_t ubx::NAV::SAT_GET::_data::repeated_flags_doCorrUsed(uint8_t n)const{ return UBX_GET_VAR_BIT(repeated[n].flags, NAV_SAT_GET_REPEATED_FLAGS_DOCORRUSED_MASK, NAV_SAT_GET_REPEATED_FLAGS_DOCORRUSED_OFFSET); }
void ubx::NAV::SAT_GET::_data::repeated_flags_clasCorrUsed(uint8_t val, uint8_t n){ UBX_CHANGE_VAR_BIT(repeated[n].flags, val, NAV_SAT_GET_REPEATED_FLAGS_CLASCORRUSED_MASK, NAV_SAT_GET_REPEATED_FLAGS_CLASCORRUSED_OFFSET); }
uint8_t ubx::NAV::SAT_GET::_data::repeated_flags_clasCorrUsed(uint8_t n)const{ return UBX_GET_VAR_BIT(repeated[n].flags, NAV_SAT_GET_REPEATED_FLAGS_CLASCORRUSED_MASK, NAV_SAT_GET_REPEATED_FLAGS_CLASCORRUSED_OFFSET); }
const uint16_t ubx::NAV::SAT_GET::repeatedSize = sizeof(struct ubx::NAV::SAT_GET::_data::_repeated);
uint8_t ubx::NAV::SVINFO::getClassId(void) const { return ubx::NAV::classID; }
uint8_t ubx::NAV::SVINFO::getMessageId(void) const { return messageID; }
const std::string &ubx::NAV::SVINFO::getClassName(void) const { return classIDName; }
std::string ubx::NAV::SVINFO::getMessageName(void) const { return std::string("SVINFO"); };
std::string ubx::NAV::SVINFO::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"iTOW\":" << std::to_string(data.iTOW) << ", \"numCh\":" << std::to_string(data.numCh) << ", \"globalFlags\":" << std::to_string(data.globalFlags) << ", \"reserved1\":" << "0";
    for (uint16_t i = 0; i < repeatedLen; i++) { ret << ", \"chn[" << i << "]\":" << std::to_string(data.repeated[i].chn) << ", \"svid[" << i << "]\":" << std::to_string(data.repeated[i].svid) << ", \"flags[" << i << "]\":" << std::to_string(data.repeated[i].flags) << ", \"quality[" << i << "]\":" << std::to_string(data.repeated[i].quality) << ", \"cno[" << i << "]\":" << std::to_string(data.repeated[i].cno) << ", \"elev[" << i << "]\":" << std::to_string(data.repeated[i].elev) << ", \"axim[" << i << "]\":" << std::to_string(data.repeated[i].axim) << ", \"prRes[" << i << "]\":" << std::to_string(data.repeated[i].prRes);}
    ret << "}";
    return ret.str();
}
uint8_t* ubx::NAV::SVINFO::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::NAV::SVINFO::getDataSize(void) const { return sizeof(data) + (repeatedLen * repeatedSize); }
const uint16_t ubx::NAV::SVINFO::repeatedSize = sizeof(struct ubx::NAV::SVINFO::_data::_repeated);
