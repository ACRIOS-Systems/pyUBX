// File lang/cpp/src/messages/CFG.hpp
// Auto-generated by pyUBX generateCPP.py v0.2 on 2023-12-05T08:10:39.084429
// See https://github.com/mayeranalytics/pyUBX
// DO NOT MODIFY THIS FILE!

#ifndef __CFG_H__
#define __CFG_H__
#include "Ubx.hpp"

/* Message class CFG.
 */
namespace ubx
{
namespace CFG {

constexpr uint8_t classID = 6;


#define CFG_CFG_CLEARMASK_IOPORT_OFFSET (0)
#define CFG_CFG_CLEARMASK_IOPORT_MASK (1)
#define CFG_CFG_CLEARMASK_MSGCONF_OFFSET (1)
#define CFG_CFG_CLEARMASK_MSGCONF_MASK (2)
#define CFG_CFG_CLEARMASK_INFMSG_OFFSET (2)
#define CFG_CFG_CLEARMASK_INFMSG_MASK (4)
#define CFG_CFG_CLEARMASK_NAVCONF_OFFSET (3)
#define CFG_CFG_CLEARMASK_NAVCONF_MASK (8)
#define CFG_CFG_CLEARMASK_RXMCONF_OFFSET (4)
#define CFG_CFG_CLEARMASK_RXMCONF_MASK (16)
#define CFG_CFG_CLEARMASK_SENCONF_OFFSET (8)
#define CFG_CFG_CLEARMASK_SENCONF_MASK (256)
#define CFG_CFG_CLEARMASK_RINVCONF_OFFSET (9)
#define CFG_CFG_CLEARMASK_RINVCONF_MASK (512)
#define CFG_CFG_CLEARMASK_ANTCONF_OFFSET (10)
#define CFG_CFG_CLEARMASK_ANTCONF_MASK (1024)
#define CFG_CFG_CLEARMASK_LOGCONF_OFFSET (11)
#define CFG_CFG_CLEARMASK_LOGCONF_MASK (2048)
#define CFG_CFG_CLEARMASK_FTSCONF_OFFSET (12)
#define CFG_CFG_CLEARMASK_FTSCONF_MASK (4096)

#define CFG_CFG_SAVEMASK_IOPORT_OFFSET (0)
#define CFG_CFG_SAVEMASK_IOPORT_MASK (1)
#define CFG_CFG_SAVEMASK_MSGCONF_OFFSET (1)
#define CFG_CFG_SAVEMASK_MSGCONF_MASK (2)
#define CFG_CFG_SAVEMASK_INFMSG_OFFSET (2)
#define CFG_CFG_SAVEMASK_INFMSG_MASK (4)
#define CFG_CFG_SAVEMASK_NAVCONF_OFFSET (3)
#define CFG_CFG_SAVEMASK_NAVCONF_MASK (8)
#define CFG_CFG_SAVEMASK_RXMCONF_OFFSET (4)
#define CFG_CFG_SAVEMASK_RXMCONF_MASK (16)
#define CFG_CFG_SAVEMASK_SENCONF_OFFSET (8)
#define CFG_CFG_SAVEMASK_SENCONF_MASK (256)
#define CFG_CFG_SAVEMASK_RINVCONF_OFFSET (9)
#define CFG_CFG_SAVEMASK_RINVCONF_MASK (512)
#define CFG_CFG_SAVEMASK_ANTCONF_OFFSET (10)
#define CFG_CFG_SAVEMASK_ANTCONF_MASK (1024)
#define CFG_CFG_SAVEMASK_LOGCONF_OFFSET (11)
#define CFG_CFG_SAVEMASK_LOGCONF_MASK (2048)
#define CFG_CFG_SAVEMASK_FTSCONF_OFFSET (12)
#define CFG_CFG_SAVEMASK_FTSCONF_MASK (4096)

#define CFG_CFG_LOADMASK_IOPORT_OFFSET (0)
#define CFG_CFG_LOADMASK_IOPORT_MASK (1)
#define CFG_CFG_LOADMASK_MSGCONF_OFFSET (1)
#define CFG_CFG_LOADMASK_MSGCONF_MASK (2)
#define CFG_CFG_LOADMASK_INFMSG_OFFSET (2)
#define CFG_CFG_LOADMASK_INFMSG_MASK (4)
#define CFG_CFG_LOADMASK_NAVCONF_OFFSET (3)
#define CFG_CFG_LOADMASK_NAVCONF_MASK (8)
#define CFG_CFG_LOADMASK_RXMCONF_OFFSET (4)
#define CFG_CFG_LOADMASK_RXMCONF_MASK (16)
#define CFG_CFG_LOADMASK_SENCONF_OFFSET (8)
#define CFG_CFG_LOADMASK_SENCONF_MASK (256)
#define CFG_CFG_LOADMASK_RINVCONF_OFFSET (9)
#define CFG_CFG_LOADMASK_RINVCONF_MASK (512)
#define CFG_CFG_LOADMASK_ANTCONF_OFFSET (10)
#define CFG_CFG_LOADMASK_ANTCONF_MASK (1024)
#define CFG_CFG_LOADMASK_LOGCONF_OFFSET (11)
#define CFG_CFG_LOADMASK_LOGCONF_MASK (2048)
#define CFG_CFG_LOADMASK_FTSCONF_OFFSET (12)
#define CFG_CFG_LOADMASK_FTSCONF_MASK (4096)

#define CFG_CFG_DEVICEMASK_DEVBBR_OFFSET (0)
#define CFG_CFG_DEVICEMASK_DEVBBR_MASK (1)
#define CFG_CFG_DEVICEMASK_DEVFLASH_OFFSET (1)
#define CFG_CFG_DEVICEMASK_DEVFLASH_MASK (2)
#define CFG_CFG_DEVICEMASK_DEVEEPROM_OFFSET (2)
#define CFG_CFG_DEVICEMASK_DEVEEPROM_MASK (4)
#define CFG_CFG_DEVICEMASK_DEVSPIFLASH_OFFSET (4)
#define CFG_CFG_DEVICEMASK_DEVSPIFLASH_MASK (16)
/* 32.10.3.1 Clear, save and load configurations
 */
struct __attribute__((packed)) CFG : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 9;

    struct __attribute__((packed)) _data {
        uint32_t clearMask;
        uint32_t saveMask;
        uint32_t loadMask;
        uint8_t deviceMask;


        void clearMask_ioPort(uint8_t val);
        uint8_t clearMask_ioPort() const;
        void clearMask_msgConf(uint8_t val);
        uint8_t clearMask_msgConf() const;
        void clearMask_infMsg(uint8_t val);
        uint8_t clearMask_infMsg() const;
        void clearMask_navConf(uint8_t val);
        uint8_t clearMask_navConf() const;
        void clearMask_rxmConf(uint8_t val);
        uint8_t clearMask_rxmConf() const;
        void clearMask_senConf(uint8_t val);
        uint8_t clearMask_senConf() const;
        void clearMask_rinvConf(uint8_t val);
        uint8_t clearMask_rinvConf() const;
        void clearMask_antConf(uint8_t val);
        uint8_t clearMask_antConf() const;
        void clearMask_logConf(uint8_t val);
        uint8_t clearMask_logConf() const;
        void clearMask_ftsConf(uint8_t val);
        uint8_t clearMask_ftsConf() const;

        void saveMask_ioPort(uint8_t val);
        uint8_t saveMask_ioPort() const;
        void saveMask_msgConf(uint8_t val);
        uint8_t saveMask_msgConf() const;
        void saveMask_infMsg(uint8_t val);
        uint8_t saveMask_infMsg() const;
        void saveMask_navConf(uint8_t val);
        uint8_t saveMask_navConf() const;
        void saveMask_rxmConf(uint8_t val);
        uint8_t saveMask_rxmConf() const;
        void saveMask_senConf(uint8_t val);
        uint8_t saveMask_senConf() const;
        void saveMask_rinvConf(uint8_t val);
        uint8_t saveMask_rinvConf() const;
        void saveMask_antConf(uint8_t val);
        uint8_t saveMask_antConf() const;
        void saveMask_logConf(uint8_t val);
        uint8_t saveMask_logConf() const;
        void saveMask_ftsConf(uint8_t val);
        uint8_t saveMask_ftsConf() const;

        void loadMask_ioPort(uint8_t val);
        uint8_t loadMask_ioPort() const;
        void loadMask_msgConf(uint8_t val);
        uint8_t loadMask_msgConf() const;
        void loadMask_infMsg(uint8_t val);
        uint8_t loadMask_infMsg() const;
        void loadMask_navConf(uint8_t val);
        uint8_t loadMask_navConf() const;
        void loadMask_rxmConf(uint8_t val);
        uint8_t loadMask_rxmConf() const;
        void loadMask_senConf(uint8_t val);
        uint8_t loadMask_senConf() const;
        void loadMask_rinvConf(uint8_t val);
        uint8_t loadMask_rinvConf() const;
        void loadMask_antConf(uint8_t val);
        uint8_t loadMask_antConf() const;
        void loadMask_logConf(uint8_t val);
        uint8_t loadMask_logConf() const;
        void loadMask_ftsConf(uint8_t val);
        uint8_t loadMask_ftsConf() const;

        void deviceMask_devBBR(uint8_t val);
        uint8_t deviceMask_devBBR() const;
        void deviceMask_devFlash(uint8_t val);
        uint8_t deviceMask_devFlash() const;
        void deviceMask_devEEPROM(uint8_t val);
        uint8_t deviceMask_devEEPROM() const;
        void deviceMask_devSpiFlash(uint8_t val);
        uint8_t deviceMask_devSpiFlash() const;
    } data;
};


#define CFG_GNSS_REPEATED_FLAGS_ENABLE_OFFSET (0)
#define CFG_GNSS_REPEATED_FLAGS_ENABLE_MASK (1)
#define CFG_GNSS_REPEATED_FLAGS_SIGCFGMASK_OFFSET (16)
#define CFG_GNSS_REPEATED_FLAGS_SIGCFGMASK_MASK (16711680)
/* GNSS system configuration. ยง31.11.10.
 */
struct __attribute__((packed)) GNSS : public SerializeCommon
{
    uint16_t repeatedLen; /* Set N-count array dimension of repeated structure. Do not serialize this byte*/
    static const uint16_t repeatedSize;
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 62;

    struct __attribute__((packed)) _data {
        uint8_t msgVer;
        uint8_t numTrkChHw;
        uint8_t numTrkChUse;
        uint8_t numConfigBlocks;

        struct __attribute__((packed)) _repeated {
            uint8_t gnssId;
            uint8_t resTrkCh;
            uint8_t maxTrkCh;
            uint8_t reserved;
            uint32_t flags;
        } repeated [0]; /* [0] -> to pass compilation. Length is set by repeatedLen. Do not forget alloc enough space*/

        enum _repeated_gnssId_allowed{
            allowed_repeated_gnssId_GPS=0,
            allowed_repeated_gnssId_SBAS=1,
            allowed_repeated_gnssId_Galileo=2,
            allowed_repeated_gnssId_BeiDou=3,
            allowed_repeated_gnssId_IMES=4,
            allowed_repeated_gnssId_QZSS=5,
            allowed_repeated_gnssId_GLONASS=6,
        };

        void repeated_flags_enable(uint8_t val, uint8_t n);
        uint8_t repeated_flags_enable(uint8_t n) const;
        void repeated_flags_sigCfgMask(uint8_t val, uint8_t n);
        uint8_t repeated_flags_sigCfgMask(uint8_t n) const;
    } data;
};


#define CFG_INF_REPEATED_INFMSGMASK_ERROR_OFFSET (0)
#define CFG_INF_REPEATED_INFMSGMASK_ERROR_MASK (1)
#define CFG_INF_REPEATED_INFMSGMASK_WARNING_OFFSET (1)
#define CFG_INF_REPEATED_INFMSGMASK_WARNING_MASK (2)
#define CFG_INF_REPEATED_INFMSGMASK_NOTICE_OFFSET (2)
#define CFG_INF_REPEATED_INFMSGMASK_NOTICE_MASK (4)
#define CFG_INF_REPEATED_INFMSGMASK_TEST_OFFSET (3)
#define CFG_INF_REPEATED_INFMSGMASK_TEST_MASK (8)
#define CFG_INF_REPEATED_INFMSGMASK_DEBUG_OFFSET (4)
#define CFG_INF_REPEATED_INFMSGMASK_DEBUG_MASK (16)
/* GNSS system configuration. ยง32.10.15.2
 */
struct __attribute__((packed)) INF : public SerializeCommon
{
    uint16_t repeatedLen; /* Set N-count array dimension of repeated structure. Do not serialize this byte*/
    static const uint16_t repeatedSize;
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 2;

    struct __attribute__((packed)) _data {

        struct __attribute__((packed)) _repeated {
            uint8_t protocolID;
            uint8_t reserved1[3];
            uint8_t infMsgMask;
            uint8_t infMsgMaskUnused[5];
        } repeated [0]; /* [0] -> to pass compilation. Length is set by repeatedLen. Do not forget alloc enough space*/

        enum _repeated_protocolID_allowed{
            allowed_repeated_protocolID_UBX_protocol=0,
            allowed_repeated_protocolID_NMEA_protocol=1,
        };

        void repeated_infMsgMask_ERROR(uint8_t val, uint8_t n);
        uint8_t repeated_infMsgMask_ERROR(uint8_t n) const;
        void repeated_infMsgMask_WARNING(uint8_t val, uint8_t n);
        uint8_t repeated_infMsgMask_WARNING(uint8_t n) const;
        void repeated_infMsgMask_NOTICE(uint8_t val, uint8_t n);
        uint8_t repeated_infMsgMask_NOTICE(uint8_t n) const;
        void repeated_infMsgMask_TEST(uint8_t val, uint8_t n);
        uint8_t repeated_infMsgMask_TEST(uint8_t n) const;
        void repeated_infMsgMask_DEBUG(uint8_t val, uint8_t n);
        uint8_t repeated_infMsgMask_DEBUG(uint8_t n) const;
    } data;
};


#define CFG_LOGFILTER_FLAGS_RECORDENABLED_OFFSET (0)
#define CFG_LOGFILTER_FLAGS_RECORDENABLED_MASK (1)
#define CFG_LOGFILTER_FLAGS_PSMONCEPERWAKUPENABLED_OFFSET (1)
#define CFG_LOGFILTER_FLAGS_PSMONCEPERWAKUPENABLED_MASK (2)
#define CFG_LOGFILTER_FLAGS_APPLYALLFILTERSETTINGS_OFFSET (2)
#define CFG_LOGFILTER_FLAGS_APPLYALLFILTERSETTINGS_MASK (4)
/* 32.10.17.1 Data logger configuration
 */
struct __attribute__((packed)) LOGFILTER : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 71;

    struct __attribute__((packed)) _data {
        uint8_t version;
        uint8_t flags;
        uint16_t minInterval;
        uint16_t timeThreshold;
        uint16_t speedThreshold;
        uint32_t positionThreshold;


        void flags_recordEnabled(uint8_t val);
        uint8_t flags_recordEnabled() const;
        void flags_psmOncePerWakupEnabled(uint8_t val);
        uint8_t flags_psmOncePerWakupEnabled() const;
        void flags_applyAllFilterSettings(uint8_t val);
        uint8_t flags_applyAllFilterSettings() const;
    } data;
};

/* 32.10.18.2 Set message rate(s)
 */
struct __attribute__((packed)) MSG : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 1;

    struct __attribute__((packed)) _data {
        uint8_t msgClass;
        uint8_t msgID;
        uint8_t rate[6];

    } data;
};


#define CFG_NAVX5_MASK1_MINMAX_OFFSET (2)
#define CFG_NAVX5_MASK1_MINMAX_MASK (4)
#define CFG_NAVX5_MASK1_MINCNO_OFFSET (3)
#define CFG_NAVX5_MASK1_MINCNO_MASK (8)
#define CFG_NAVX5_MASK1_INITIAL3DFIX_OFFSET (6)
#define CFG_NAVX5_MASK1_INITIAL3DFIX_MASK (64)
#define CFG_NAVX5_MASK1_WKNROLL_OFFSET (9)
#define CFG_NAVX5_MASK1_WKNROLL_MASK (512)
#define CFG_NAVX5_MASK1_ACKAID_OFFSET (10)
#define CFG_NAVX5_MASK1_ACKAID_MASK (1024)
#define CFG_NAVX5_MASK1_PPP_OFFSET (13)
#define CFG_NAVX5_MASK1_PPP_MASK (8192)
#define CFG_NAVX5_MASK1_AOP_OFFSET (14)
#define CFG_NAVX5_MASK1_AOP_MASK (16384)

#define CFG_NAVX5_MASK2_ADR_OFFSET (6)
#define CFG_NAVX5_MASK2_ADR_MASK (64)

#define CFG_NAVX5_AOPCFG_USEAOP_OFFSET (0)
#define CFG_NAVX5_AOPCFG_USEAOP_MASK (1)
/* ยง32.10.20.2 Navigation engine expert settings.
 */
struct __attribute__((packed)) NAVX5 : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 35;

    struct __attribute__((packed)) _data {
        uint16_t version;
        uint16_t mask1;
        uint32_t mask2;
        uint16_t reserved1;
        uint8_t minSVs;
        uint8_t maxSVs;
        uint8_t minCNO;
        uint8_t reserved2;
        uint8_t iniFix3D;
        uint16_t reserved3;
        uint8_t ackAiding;
        uint16_t wknRollover;
        uint8_t sigAttenCompMode;
        uint8_t reserved4[5];
        uint8_t usePPP;
        uint8_t aopCfg;
        uint16_t reserved5;
        uint16_t aopOrbMaxErr;
        uint32_t reserved6;
        uint8_t reserved7[3];
        uint8_t useAdr;

        enum _iniFix3D_allowed{
            allowed_iniFix3D_initial_fix_must_be_3D=1,
        };
        enum _ackAiding_allowed{
            allowed_ackAiding_issue_acknowledgements_for_assistance=1,
        };
        enum _usePPP_allowed{
            allowed_usePPP_Precise_Point_Positioning=1,
        };
        enum _useAdr_allowed{
            allowed_useAdr_disable_ADR_sensor_fusion=0,
            allowed_useAdr_enable_ADR_sensor_fusion=1,
        };

        void mask1_minMax(uint8_t val);
        uint8_t mask1_minMax() const;
        void mask1_minCno(uint8_t val);
        uint8_t mask1_minCno() const;
        void mask1_initial3dfix(uint8_t val);
        uint8_t mask1_initial3dfix() const;
        void mask1_wknRoll(uint8_t val);
        uint8_t mask1_wknRoll() const;
        void mask1_ackAid(uint8_t val);
        uint8_t mask1_ackAid() const;
        void mask1_ppp(uint8_t val);
        uint8_t mask1_ppp() const;
        void mask1_aop(uint8_t val);
        uint8_t mask1_aop() const;

        void mask2_adr(uint8_t val);
        uint8_t mask2_adr() const;

        void aopCfg_useAOP(uint8_t val);
        uint8_t aopCfg_useAOP() const;
    } data;
};


#define CFG_PM2_FLAGS_OPTTARGET_OFFSET (1)
#define CFG_PM2_FLAGS_OPTTARGET_MASK (14)
#define CFG_PM2_FLAGS_EXTINTSEL_OFFSET (4)
#define CFG_PM2_FLAGS_EXTINTSEL_MASK (16)
#define CFG_PM2_FLAGS_EXTINTWAKE_OFFSET (5)
#define CFG_PM2_FLAGS_EXTINTWAKE_MASK (32)
#define CFG_PM2_FLAGS_EXTINTBACKUP_OFFSET (6)
#define CFG_PM2_FLAGS_EXTINTBACKUP_MASK (64)
#define CFG_PM2_FLAGS_EXTINTINACTIV_OFFSET (7)
#define CFG_PM2_FLAGS_EXTINTINACTIV_MASK (128)
#define CFG_PM2_FLAGS_LIMITPEAKCURR_OFFSET (8)
#define CFG_PM2_FLAGS_LIMITPEAKCURR_MASK (768)
#define CFG_PM2_FLAGS_WAITTIMEFIX_OFFSET (10)
#define CFG_PM2_FLAGS_WAITTIMEFIX_MASK (1024)
#define CFG_PM2_FLAGS_UPDATERTC_OFFSET (11)
#define CFG_PM2_FLAGS_UPDATERTC_MASK (2048)
#define CFG_PM2_FLAGS_UPDATEEPH_OFFSET (12)
#define CFG_PM2_FLAGS_UPDATEEPH_MASK (4096)
#define CFG_PM2_FLAGS_DONOTENTEROFF_OFFSET (16)
#define CFG_PM2_FLAGS_DONOTENTEROFF_MASK (65536)
#define CFG_PM2_FLAGS_MODE_OFFSET (17)
#define CFG_PM2_FLAGS_MODE_MASK (393216)
/* ยง31.11.20 Extended Power Management configuration.
 */
struct __attribute__((packed)) PM2 : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 59;

    struct __attribute__((packed)) _data {
        uint8_t version;
        uint8_t reserved1;
        uint8_t maxStartupStateDur;
        uint8_t reserved2;
        uint32_t flags;
        uint32_t updatePeriod;
        uint32_t searchPeriod;
        uint32_t gridOffset;
        uint16_t onTime;
        uint16_t minAcqTime;
        uint8_t reserved3[20];
        uint32_t extintInactivityMs;

        enum _version_allowed{
            allowed_version_this_version=2,
        };
        enum _maxStartupStateDur_allowed{
            allowed_maxStartupStateDur_bound_disabled=0,
        };
        enum _updatePeriod_allowed{
            allowed_updatePeriod_external_event=0,
        };
        enum _searchPeriod_allowed{
            allowed_searchPeriod_never_retry=0,
        };

        void flags_optTarget(uint8_t val);
        uint8_t flags_optTarget() const;
        void flags_extintSel(uint8_t val);
        uint8_t flags_extintSel() const;
        void flags_extintWake(uint8_t val);
        uint8_t flags_extintWake() const;
        void flags_extintBackup(uint8_t val);
        uint8_t flags_extintBackup() const;
        void flags_extintInactiv(uint8_t val);
        uint8_t flags_extintInactiv() const;
        void flags_limitPeakCurr(uint8_t val);
        uint8_t flags_limitPeakCurr() const;
        void flags_waitTimeFix(uint8_t val);
        uint8_t flags_waitTimeFix() const;
        void flags_updateRTC(uint8_t val);
        uint8_t flags_updateRTC() const;
        void flags_updateEPH(uint8_t val);
        uint8_t flags_updateEPH() const;
        void flags_doNotEnterOff(uint8_t val);
        uint8_t flags_doNotEnterOff() const;
        void flags_mode(uint8_t val);
        uint8_t flags_mode() const;
    } data;
};

/* 32.10.24.1 Power mode setup
 */
struct __attribute__((packed)) PMS : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 134;

    struct __attribute__((packed)) _data {
        uint8_t version;
        uint8_t powerSetupValue;
        uint16_t period;
        uint16_t onTime;
        uint16_t reserved;

        enum _version_allowed{
            allowed_version_this_version=0,
        };
        enum _powerSetupValue_allowed{
            allowed_powerSetupValue_Full_power=0,
            allowed_powerSetupValue_Balanced=1,
            allowed_powerSetupValue_Interval=2,
            allowed_powerSetupValue_Aggressive_with_1_Hz=3,
            allowed_powerSetupValue_Aggressive_with_2_Hz=4,
            allowed_powerSetupValue_Aggressive_with_4_Hz=5,
            allowed_powerSetupValue_Invalid=255,
        };
    } data;
};


#define CFG_PRT_TXREADY_EN_OFFSET (0)
#define CFG_PRT_TXREADY_EN_MASK (1)
#define CFG_PRT_TXREADY_POL_OFFSET (1)
#define CFG_PRT_TXREADY_POL_MASK (2)
#define CFG_PRT_TXREADY_PIN_OFFSET (2)
#define CFG_PRT_TXREADY_PIN_MASK (124)
#define CFG_PRT_TXREADY_THRES_OFFSET (7)
#define CFG_PRT_TXREADY_THRES_MASK (65408)

#define CFG_PRT_MODE_CHARLEN_OFFSET (6)
#define CFG_PRT_MODE_CHARLEN_MASK (192)
#define CFG_PRT_MODE_PARITY_OFFSET (9)
#define CFG_PRT_MODE_PARITY_MASK (3584)
#define CFG_PRT_MODE_NSTOPBITS_OFFSET (12)
#define CFG_PRT_MODE_NSTOPBITS_MASK (12288)

#define CFG_PRT_INPROTOMASK_INUBX_OFFSET (0)
#define CFG_PRT_INPROTOMASK_INUBX_MASK (1)
#define CFG_PRT_INPROTOMASK_INNMEA_OFFSET (1)
#define CFG_PRT_INPROTOMASK_INNMEA_MASK (2)
#define CFG_PRT_INPROTOMASK_INRTCM_OFFSET (2)
#define CFG_PRT_INPROTOMASK_INRTCM_MASK (4)
#define CFG_PRT_INPROTOMASK_INRTCM3_OFFSET (5)
#define CFG_PRT_INPROTOMASK_INRTCM3_MASK (32)

#define CFG_PRT_OUTPROTOMASK_OUTUBX_OFFSET (0)
#define CFG_PRT_OUTPROTOMASK_OUTUBX_MASK (1)
#define CFG_PRT_OUTPROTOMASK_OUTNMEA_OFFSET (1)
#define CFG_PRT_OUTPROTOMASK_OUTNMEA_MASK (2)
#define CFG_PRT_OUTPROTOMASK_INRTCM3_OFFSET (5)
#define CFG_PRT_OUTPROTOMASK_INRTCM3_MASK (32)

#define CFG_PRT_FLAGS_EXTENDEDTXTIMEOUT_OFFSET (1)
#define CFG_PRT_FLAGS_EXTENDEDTXTIMEOUT_MASK (2)
/* ยง31.11.22.4 Port Configuration.
 */
struct __attribute__((packed)) PRT : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 0;

    struct __attribute__((packed)) _data {
        uint8_t portID;
        uint8_t reserved1;
        uint16_t txReady;
        uint32_t mode;
        uint32_t baudRate;
        uint16_t inProtoMask;
        uint16_t outProtoMask;
        uint16_t flags;
        uint16_t reserved2;

        enum _portID_allowed{
            allowed_portID_i2c=0,
            allowed_portID_UART1=1,
            allowed_portID_UART2=2,
            allowed_portID_USB=3,
            allowed_portID_SPI=4,
        };

        void txReady_en(uint8_t val);
        uint8_t txReady_en() const;
        void txReady_pol(uint8_t val);
        uint8_t txReady_pol() const;
        void txReady_pin(uint8_t val);
        uint8_t txReady_pin() const;
        void txReady_thres(uint8_t val);
        uint8_t txReady_thres() const;

        void mode_charLen(uint8_t val);
        uint8_t mode_charLen() const;
        void mode_parity(uint8_t val);
        uint8_t mode_parity() const;
        void mode_nStopBits(uint8_t val);
        uint8_t mode_nStopBits() const;

        void inProtoMask_inUbx(uint8_t val);
        uint8_t inProtoMask_inUbx() const;
        void inProtoMask_inNmea(uint8_t val);
        uint8_t inProtoMask_inNmea() const;
        void inProtoMask_inRtcm(uint8_t val);
        uint8_t inProtoMask_inRtcm() const;
        void inProtoMask_inRtcm3(uint8_t val);
        uint8_t inProtoMask_inRtcm3() const;

        void outProtoMask_outUbx(uint8_t val);
        uint8_t outProtoMask_outUbx() const;
        void outProtoMask_outNmea(uint8_t val);
        uint8_t outProtoMask_outNmea() const;
        void outProtoMask_inRtcm3(uint8_t val);
        uint8_t outProtoMask_inRtcm3() const;

        void flags_extendedTxTimeout(uint8_t val);
        uint8_t flags_extendedTxTimeout() const;
    } data;
};

/* ยง31.11.22.4 Port Configuration.
 */
struct __attribute__((packed)) PRT_GET : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 0;

    struct __attribute__((packed)) _data {
        uint8_t portID;

    } data;
};

/* ยง31.11.24 Navigation/Measurement Rate Settings.
 */
struct __attribute__((packed)) RATE : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 8;

    struct __attribute__((packed)) _data {
        uint16_t measRate;
        uint16_t navRate;
        uint16_t timeRef;

        enum _timeRef_allowed{
            allowed_timeRef_UTC_time=0,
            allowed_timeRef_GPS_time=1,
            allowed_timeRef_GLONASS_time=2,
            allowed_timeRef_BeiDou_time=3,
            allowed_timeRef_Galileo_time=4,
            allowed_timeRef_NavIC_time=5,
        };
    } data;
};

/* 32.10.29.1 Reset receiver / Clear backup data structures
 *
 *         Do not expect this message to be acknowledged by the receiver.
 *         โข Newer FW version will not acknowledge this message at all.
 *         โข Older FW version will acknowledge this message but the acknowledge may not
 *         be sent completely before the receiver is reset.
 *         Notes:
 *         โข If Galileo is enabled, UBX-CFG-RST Controlled GNSS start must be followed by
 *         UBX-CFG-CFG to save current configuration to BBR and then by UBX-CFG-RST
 *         with resetMode set to Hardware reset.
 *         โข If Galileo is enabled, use resetMode Hardware reset instead of Controlled
 *         software reset or Controlled software reset (GNSS only).
 */
struct __attribute__((packed)) RST : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 4;

    struct __attribute__((packed)) _data {
        uint16_t navBbrMask;
        uint8_t resetMode;
        uint8_t reserved1;

        enum _navBbrMask_allowed{
            allowed_navBbrMask_HOT_START=0,
            allowed_navBbrMask_WARM_START=1,
            allowed_navBbrMask_COLD_START=65535,
        };
        enum _resetMode_allowed{
            allowed_resetMode_HW=0,
            allowed_resetMode_SW=1,
            allowed_resetMode_SW_GNSS_ONLY=2,
            allowed_resetMode_HW_AFTER_SHUTDOWN=3,
            allowed_resetMode_STOP=8,
            allowed_resetMode_START=9,
        };
    } data;
};

/* ยง31.11.27 RXM configuration.
 *
 *         For a detailed description see section 'Power Management'.
 */
struct __attribute__((packed)) RXM : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 17;

    struct __attribute__((packed)) _data {
        uint8_t reserved1;
        uint8_t lpMode;

        enum _lpMode_allowed{
            allowed_lpMode_Continuous_mode=0,
            allowed_lpMode_Power_save_mode=1,
            allowed_lpMode_Continuous_mode1=4,
        };
    } data;
};

/* ยง31.11.32.3 Time Pulse Parameters.
 */
struct __attribute__((packed)) TP5 : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 49;

    struct __attribute__((packed)) _data {
        uint8_t tpIdx;
        uint8_t version;
        uint16_t reserved2;
        int16_t antCableDelay;
        int16_t rfGroupDelay;
        uint32_t freqPeriod;
        uint32_t freqPeriodLock;
        uint32_t pulseLenRatio;
        uint32_t pulseLenRatioLock;
        int32_t userConfigDelay;
        uint32_t flags;

    } data;
};

/* ยง31.11.32.2 Poll Time Pulse Parameters.
 */
struct __attribute__((packed)) TP5_GET : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 0;

    struct __attribute__((packed)) _data {
        uint8_t tpIdx;

    } data;
};

} // namespace CFG
} // namespace ubx
#endif // ifndef __CFG_H__
