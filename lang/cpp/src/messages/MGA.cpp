// File lang/cpp/src/messages/MGA.cpp
// Auto-generated by pyUBX generateCPP.py v0.2 on 2024-06-10T10:44:49.580743
// See https://github.com/mayeranalytics/pyUBX
// DO NOT MODIFY THIS FILE!

 #include "MGA.hpp"
#include <sstream>

const std::string classIDName("MGA");

uint8_t ubx::MGA::ACK_DATA0::getClassId(void) const { return ubx::MGA::classID; }
uint8_t ubx::MGA::ACK_DATA0::getMessageId(void) const { return messageID; }
const std::string &ubx::MGA::ACK_DATA0::getClassName(void) const { return classIDName; }
std::string ubx::MGA::ACK_DATA0::getMessageName(void) const { return std::string("ACK_DATA0"); };
std::string ubx::MGA::ACK_DATA0::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"type\":" << std::to_string(data.type) << ", \"version\":" << std::to_string(data.version) << ", \"infoCode\":" << std::to_string(data.infoCode) << ", \"msgId\":" << std::to_string(data.msgId) << ", \"msgPayloadStart\":" << std::to_string(data.msgPayloadStart);
    ret << "}";
    return ret.str();
}
uint8_t* ubx::MGA::ACK_DATA0::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::MGA::ACK_DATA0::getDataSize(void) const { return sizeof(data); }
uint8_t ubx::MGA::FLASH_ACK::getClassId(void) const { return ubx::MGA::classID; }
uint8_t ubx::MGA::FLASH_ACK::getMessageId(void) const { return messageID; }
const std::string &ubx::MGA::FLASH_ACK::getClassName(void) const { return classIDName; }
std::string ubx::MGA::FLASH_ACK::getMessageName(void) const { return std::string("FLASH_ACK"); };
std::string ubx::MGA::FLASH_ACK::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"type\":" << std::to_string(data.type) << ", \"version\":" << std::to_string(data.version) << ", \"ack\":" << std::to_string(data.ack) << ", \"reserved1\":" << "0" << ", \"sequence\":" << std::to_string(data.sequence);
    ret << "}";
    return ret.str();
}
uint8_t* ubx::MGA::FLASH_ACK::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::MGA::FLASH_ACK::getDataSize(void) const { return sizeof(data); }
uint8_t ubx::MGA::FLASH_DATA::getClassId(void) const { return ubx::MGA::classID; }
uint8_t ubx::MGA::FLASH_DATA::getMessageId(void) const { return messageID; }
const std::string &ubx::MGA::FLASH_DATA::getClassName(void) const { return classIDName; }
std::string ubx::MGA::FLASH_DATA::getMessageName(void) const { return std::string("FLASH_DATA"); };
std::string ubx::MGA::FLASH_DATA::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"type\":" << std::to_string(data.type) << ", \"version\":" << std::to_string(data.version) << ", \"sequence\":" << std::to_string(data.sequence) << ", \"size\":" << std::to_string(data.size);
    for (uint16_t i = 0; i < repeatedLen; i++) { ret << ", \"data[" << i << "]\":" << std::to_string(data.repeated[i].data);}
    ret << "}";
    return ret.str();
}
uint8_t* ubx::MGA::FLASH_DATA::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::MGA::FLASH_DATA::getDataSize(void) const { return sizeof(data) + (repeatedLen * repeatedSize); }
const uint16_t ubx::MGA::FLASH_DATA::repeatedSize = sizeof(struct ubx::MGA::FLASH_DATA::_data::_repeated);
uint8_t ubx::MGA::FLASH_STOP::getClassId(void) const { return ubx::MGA::classID; }
uint8_t ubx::MGA::FLASH_STOP::getMessageId(void) const { return messageID; }
const std::string &ubx::MGA::FLASH_STOP::getClassName(void) const { return classIDName; }
std::string ubx::MGA::FLASH_STOP::getMessageName(void) const { return std::string("FLASH_STOP"); };
std::string ubx::MGA::FLASH_STOP::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"type\":" << std::to_string(data.type) << ", \"version\":" << std::to_string(data.version);
    ret << "}";
    return ret.str();
}
uint8_t* ubx::MGA::FLASH_STOP::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::MGA::FLASH_STOP::getDataSize(void) const { return sizeof(data); }
uint8_t ubx::MGA::INI_TIME_UTC::getClassId(void) const { return ubx::MGA::classID; }
uint8_t ubx::MGA::INI_TIME_UTC::getMessageId(void) const { return messageID; }
const std::string &ubx::MGA::INI_TIME_UTC::getClassName(void) const { return classIDName; }
std::string ubx::MGA::INI_TIME_UTC::getMessageName(void) const { return std::string("INI_TIME_UTC"); };
std::string ubx::MGA::INI_TIME_UTC::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"type\":" << std::to_string(data.type) << ", \"version\":" << std::to_string(data.version) << ", \"ref\":" << std::to_string(data.ref) << ", \"_ref\":{\"source\":" << std::to_string(data.ref_source()) << ", \"fall\":" << std::to_string(data.ref_fall()) << ", \"last\":" << std::to_string(data.ref_last()) << "}" << ", \"leapSecs\":" << std::to_string(data.leapSecs) << ", \"year\":" << std::to_string(data.year) << ", \"month\":" << std::to_string(data.month) << ", \"day\":" << std::to_string(data.day) << ", \"hour\":" << std::to_string(data.hour) << ", \"minute\":" << std::to_string(data.minute) << ", \"second\":" << std::to_string(data.second) << ", \"reserved1\":" << "0" << ", \"ns\":" << std::to_string(data.ns) << ", \"tAccS\":" << std::to_string(data.tAccS) << ", \"reserved2\":" << "0" << ", \"tAccNs\":" << std::to_string(data.tAccNs);
    ret << "}";
    return ret.str();
}
uint8_t* ubx::MGA::INI_TIME_UTC::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::MGA::INI_TIME_UTC::getDataSize(void) const { return sizeof(data); }

void ubx::MGA::INI_TIME_UTC::_data::ref_source(uint8_t val){ UBX_CHANGE_VAR_BIT(ref, val, MGA_INI_TIME_UTC_REF_SOURCE_MASK, MGA_INI_TIME_UTC_REF_SOURCE_OFFSET); }
uint8_t ubx::MGA::INI_TIME_UTC::_data::ref_source()const{ return UBX_GET_VAR_BIT(ref, MGA_INI_TIME_UTC_REF_SOURCE_MASK, MGA_INI_TIME_UTC_REF_SOURCE_OFFSET); }
void ubx::MGA::INI_TIME_UTC::_data::ref_fall(uint8_t val){ UBX_CHANGE_VAR_BIT(ref, val, MGA_INI_TIME_UTC_REF_FALL_MASK, MGA_INI_TIME_UTC_REF_FALL_OFFSET); }
uint8_t ubx::MGA::INI_TIME_UTC::_data::ref_fall()const{ return UBX_GET_VAR_BIT(ref, MGA_INI_TIME_UTC_REF_FALL_MASK, MGA_INI_TIME_UTC_REF_FALL_OFFSET); }
void ubx::MGA::INI_TIME_UTC::_data::ref_last(uint8_t val){ UBX_CHANGE_VAR_BIT(ref, val, MGA_INI_TIME_UTC_REF_LAST_MASK, MGA_INI_TIME_UTC_REF_LAST_OFFSET); }
uint8_t ubx::MGA::INI_TIME_UTC::_data::ref_last()const{ return UBX_GET_VAR_BIT(ref, MGA_INI_TIME_UTC_REF_LAST_MASK, MGA_INI_TIME_UTC_REF_LAST_OFFSET); }
