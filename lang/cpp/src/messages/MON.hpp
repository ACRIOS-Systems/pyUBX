// File lang/cpp/src/messages/MON.hpp
// Auto-generated by pyUBX generateCPP.py v0.2 on 2023-06-07T13:38:14.194813
// See https://github.com/mayeranalytics/pyUBX
// DO NOT MODIFY THIS FILE!

#ifndef __MON_H__
#define __MON_H__
#include "Ubx.hpp"

/* Message class MON.
 */
namespace ubx
{
namespace MON {

constexpr uint8_t classID = 10;

/* ยง31.17.3.1 Hardware Status.
 */
struct __attribute__((packed)) HW : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 9;

    struct __attribute__((packed)) _data {
        uint32_t pinSel;
        uint32_t pinBank;
        uint32_t pinDir;
        uint32_t pinVal;
        uint16_t noisePerMS;
        uint16_t agcCnt;
        uint8_t aStatus;
        uint8_t aPower;
        uint8_t flags;
        uint8_t reserved1;
        uint32_t usedMask;
        char VP[17];
        uint8_t jamInd;
        uint16_t reserved2;
        uint32_t pinIrq;
        uint32_t pullH;
        uint32_t pullL;

    } data;
};

/* 3.14.12.1 Signal Characteristics.
 */
struct __attribute__((packed)) SPAN : public SerializeCommon
{
    uint16_t repeatedLen; /* Set N-count array dimension of repeated structure. Do not serialize this byte*/
    static const uint16_t repeatedSize;
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 49;

    struct __attribute__((packed)) _data {
        uint8_t version;
        uint8_t numRfBlocks;
        uint8_t reserved0[2];

        struct __attribute__((packed)) _repeated {
            uint8_t spectrum[256];
            uint32_t span;
            uint32_t res;
            uint32_t center;
            uint8_t pga;
            uint8_t reserved1[3];
        } repeated [0]; /* [0] -> to pass compilation. Length is set by repeatedLen. Do not forget alloc enough space*/

        enum _version_allowed{
            allowed_version_SPAN_Message_V_0=0,
        };
    } data;
};

struct __attribute__((packed)) VER : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 4;

    struct __attribute__((packed)) _data {

    } data;
};

struct __attribute__((packed)) VER_GET : public SerializeCommon
{
    uint16_t repeatedLen; /* Set N-count array dimension of repeated structure. Do not serialize this byte*/
    static const uint16_t repeatedSize;
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 4;

    struct __attribute__((packed)) _data {
        char swVersion[30];
        char hwVersion[10];

        struct __attribute__((packed)) _repeated {
            char extension[30];
        } repeated [0]; /* [0] -> to pass compilation. Length is set by repeatedLen. Do not forget alloc enough space*/

    } data;
};

} // namespace MON
} // namespace ubx
#endif // ifndef __MON_H__
