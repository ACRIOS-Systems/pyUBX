// File lang/cpp/src/messages/CFG.cpp
// Auto-generated by pyUBX generateCPP.py v0.2 on 2023-06-06T19:57:04.611689
// See https://github.com/mayeranalytics/pyUBX
// DO NOT MODIFY THIS FILE!

 #include "CFG.hpp"
#include <sstream>

const std::string classIDName("CFG");

uint8_t ubx::CFG::CFG::getClassId(void) const { return ubx::CFG::classID; }
uint8_t ubx::CFG::CFG::getMessageId(void) const { return messageID; }
const std::string &ubx::CFG::CFG::getClassName(void) const { return classIDName; }
std::string ubx::CFG::CFG::getMessageName(void) const { return std::string("CFG"); };
std::string ubx::CFG::CFG::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"clearMask\":" << std::to_string(data.clearMask) << ", \"_clearMask\":{\"ioPort\":" << std::to_string(data.clearMask_ioPort()) << ", \"msgConf\":" << std::to_string(data.clearMask_msgConf()) << ", \"infMsg\":" << std::to_string(data.clearMask_infMsg()) << ", \"navConf\":" << std::to_string(data.clearMask_navConf()) << ", \"rxmConf\":" << std::to_string(data.clearMask_rxmConf()) << ", \"senConf\":" << std::to_string(data.clearMask_senConf()) << ", \"rinvConf\":" << std::to_string(data.clearMask_rinvConf()) << ", \"antConf\":" << std::to_string(data.clearMask_antConf()) << ", \"logConf\":" << std::to_string(data.clearMask_logConf()) << ", \"ftsConf\":" << std::to_string(data.clearMask_ftsConf()) << "}" << ", \"saveMask\":" << std::to_string(data.saveMask) << ", \"_saveMask\":{\"ioPort\":" << std::to_string(data.saveMask_ioPort()) << ", \"msgConf\":" << std::to_string(data.saveMask_msgConf()) << ", \"infMsg\":" << std::to_string(data.saveMask_infMsg()) << ", \"navConf\":" << std::to_string(data.saveMask_navConf()) << ", \"rxmConf\":" << std::to_string(data.saveMask_rxmConf()) << ", \"senConf\":" << std::to_string(data.saveMask_senConf()) << ", \"rinvConf\":" << std::to_string(data.saveMask_rinvConf()) << ", \"antConf\":" << std::to_string(data.saveMask_antConf()) << ", \"logConf\":" << std::to_string(data.saveMask_logConf()) << ", \"ftsConf\":" << std::to_string(data.saveMask_ftsConf()) << "}" << ", \"loadMask\":" << std::to_string(data.loadMask) << ", \"_loadMask\":{\"ioPort\":" << std::to_string(data.loadMask_ioPort()) << ", \"msgConf\":" << std::to_string(data.loadMask_msgConf()) << ", \"infMsg\":" << std::to_string(data.loadMask_infMsg()) << ", \"navConf\":" << std::to_string(data.loadMask_navConf()) << ", \"rxmConf\":" << std::to_string(data.loadMask_rxmConf()) << ", \"senConf\":" << std::to_string(data.loadMask_senConf()) << ", \"rinvConf\":" << std::to_string(data.loadMask_rinvConf()) << ", \"antConf\":" << std::to_string(data.loadMask_antConf()) << ", \"logConf\":" << std::to_string(data.loadMask_logConf()) << ", \"ftsConf\":" << std::to_string(data.loadMask_ftsConf()) << "}" << ", \"deviceMask\":" << std::to_string(data.deviceMask) << ", \"_deviceMask\":{\"devBBR\":" << std::to_string(data.deviceMask_devBBR()) << ", \"devFlash\":" << std::to_string(data.deviceMask_devFlash()) << ", \"devEEPROM\":" << std::to_string(data.deviceMask_devEEPROM()) << ", \"devSpiFlash\":" << std::to_string(data.deviceMask_devSpiFlash()) << "}";
    ret << "}";
    return ret.str();
}
uint8_t* ubx::CFG::CFG::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::CFG::CFG::getDataSize(void) const { return sizeof(data); }

void ubx::CFG::CFG::_data::clearMask_ioPort(uint8_t val){ UBX_CHANGE_VAR_BIT(clearMask, val, CFG_CFG_CLEARMASK_IOPORT_MASK, CFG_CFG_CLEARMASK_IOPORT_OFFSET); }
uint8_t ubx::CFG::CFG::_data::clearMask_ioPort()const{ return UBX_GET_VAR_BIT(clearMask, CFG_CFG_CLEARMASK_IOPORT_MASK, CFG_CFG_CLEARMASK_IOPORT_OFFSET); }
void ubx::CFG::CFG::_data::clearMask_msgConf(uint8_t val){ UBX_CHANGE_VAR_BIT(clearMask, val, CFG_CFG_CLEARMASK_MSGCONF_MASK, CFG_CFG_CLEARMASK_MSGCONF_OFFSET); }
uint8_t ubx::CFG::CFG::_data::clearMask_msgConf()const{ return UBX_GET_VAR_BIT(clearMask, CFG_CFG_CLEARMASK_MSGCONF_MASK, CFG_CFG_CLEARMASK_MSGCONF_OFFSET); }
void ubx::CFG::CFG::_data::clearMask_infMsg(uint8_t val){ UBX_CHANGE_VAR_BIT(clearMask, val, CFG_CFG_CLEARMASK_INFMSG_MASK, CFG_CFG_CLEARMASK_INFMSG_OFFSET); }
uint8_t ubx::CFG::CFG::_data::clearMask_infMsg()const{ return UBX_GET_VAR_BIT(clearMask, CFG_CFG_CLEARMASK_INFMSG_MASK, CFG_CFG_CLEARMASK_INFMSG_OFFSET); }
void ubx::CFG::CFG::_data::clearMask_navConf(uint8_t val){ UBX_CHANGE_VAR_BIT(clearMask, val, CFG_CFG_CLEARMASK_NAVCONF_MASK, CFG_CFG_CLEARMASK_NAVCONF_OFFSET); }
uint8_t ubx::CFG::CFG::_data::clearMask_navConf()const{ return UBX_GET_VAR_BIT(clearMask, CFG_CFG_CLEARMASK_NAVCONF_MASK, CFG_CFG_CLEARMASK_NAVCONF_OFFSET); }
void ubx::CFG::CFG::_data::clearMask_rxmConf(uint8_t val){ UBX_CHANGE_VAR_BIT(clearMask, val, CFG_CFG_CLEARMASK_RXMCONF_MASK, CFG_CFG_CLEARMASK_RXMCONF_OFFSET); }
uint8_t ubx::CFG::CFG::_data::clearMask_rxmConf()const{ return UBX_GET_VAR_BIT(clearMask, CFG_CFG_CLEARMASK_RXMCONF_MASK, CFG_CFG_CLEARMASK_RXMCONF_OFFSET); }
void ubx::CFG::CFG::_data::clearMask_senConf(uint8_t val){ UBX_CHANGE_VAR_BIT(clearMask, val, CFG_CFG_CLEARMASK_SENCONF_MASK, CFG_CFG_CLEARMASK_SENCONF_OFFSET); }
uint8_t ubx::CFG::CFG::_data::clearMask_senConf()const{ return UBX_GET_VAR_BIT(clearMask, CFG_CFG_CLEARMASK_SENCONF_MASK, CFG_CFG_CLEARMASK_SENCONF_OFFSET); }
void ubx::CFG::CFG::_data::clearMask_rinvConf(uint8_t val){ UBX_CHANGE_VAR_BIT(clearMask, val, CFG_CFG_CLEARMASK_RINVCONF_MASK, CFG_CFG_CLEARMASK_RINVCONF_OFFSET); }
uint8_t ubx::CFG::CFG::_data::clearMask_rinvConf()const{ return UBX_GET_VAR_BIT(clearMask, CFG_CFG_CLEARMASK_RINVCONF_MASK, CFG_CFG_CLEARMASK_RINVCONF_OFFSET); }
void ubx::CFG::CFG::_data::clearMask_antConf(uint8_t val){ UBX_CHANGE_VAR_BIT(clearMask, val, CFG_CFG_CLEARMASK_ANTCONF_MASK, CFG_CFG_CLEARMASK_ANTCONF_OFFSET); }
uint8_t ubx::CFG::CFG::_data::clearMask_antConf()const{ return UBX_GET_VAR_BIT(clearMask, CFG_CFG_CLEARMASK_ANTCONF_MASK, CFG_CFG_CLEARMASK_ANTCONF_OFFSET); }
void ubx::CFG::CFG::_data::clearMask_logConf(uint8_t val){ UBX_CHANGE_VAR_BIT(clearMask, val, CFG_CFG_CLEARMASK_LOGCONF_MASK, CFG_CFG_CLEARMASK_LOGCONF_OFFSET); }
uint8_t ubx::CFG::CFG::_data::clearMask_logConf()const{ return UBX_GET_VAR_BIT(clearMask, CFG_CFG_CLEARMASK_LOGCONF_MASK, CFG_CFG_CLEARMASK_LOGCONF_OFFSET); }
void ubx::CFG::CFG::_data::clearMask_ftsConf(uint8_t val){ UBX_CHANGE_VAR_BIT(clearMask, val, CFG_CFG_CLEARMASK_FTSCONF_MASK, CFG_CFG_CLEARMASK_FTSCONF_OFFSET); }
uint8_t ubx::CFG::CFG::_data::clearMask_ftsConf()const{ return UBX_GET_VAR_BIT(clearMask, CFG_CFG_CLEARMASK_FTSCONF_MASK, CFG_CFG_CLEARMASK_FTSCONF_OFFSET); }

void ubx::CFG::CFG::_data::saveMask_ioPort(uint8_t val){ UBX_CHANGE_VAR_BIT(saveMask, val, CFG_CFG_SAVEMASK_IOPORT_MASK, CFG_CFG_SAVEMASK_IOPORT_OFFSET); }
uint8_t ubx::CFG::CFG::_data::saveMask_ioPort()const{ return UBX_GET_VAR_BIT(saveMask, CFG_CFG_SAVEMASK_IOPORT_MASK, CFG_CFG_SAVEMASK_IOPORT_OFFSET); }
void ubx::CFG::CFG::_data::saveMask_msgConf(uint8_t val){ UBX_CHANGE_VAR_BIT(saveMask, val, CFG_CFG_SAVEMASK_MSGCONF_MASK, CFG_CFG_SAVEMASK_MSGCONF_OFFSET); }
uint8_t ubx::CFG::CFG::_data::saveMask_msgConf()const{ return UBX_GET_VAR_BIT(saveMask, CFG_CFG_SAVEMASK_MSGCONF_MASK, CFG_CFG_SAVEMASK_MSGCONF_OFFSET); }
void ubx::CFG::CFG::_data::saveMask_infMsg(uint8_t val){ UBX_CHANGE_VAR_BIT(saveMask, val, CFG_CFG_SAVEMASK_INFMSG_MASK, CFG_CFG_SAVEMASK_INFMSG_OFFSET); }
uint8_t ubx::CFG::CFG::_data::saveMask_infMsg()const{ return UBX_GET_VAR_BIT(saveMask, CFG_CFG_SAVEMASK_INFMSG_MASK, CFG_CFG_SAVEMASK_INFMSG_OFFSET); }
void ubx::CFG::CFG::_data::saveMask_navConf(uint8_t val){ UBX_CHANGE_VAR_BIT(saveMask, val, CFG_CFG_SAVEMASK_NAVCONF_MASK, CFG_CFG_SAVEMASK_NAVCONF_OFFSET); }
uint8_t ubx::CFG::CFG::_data::saveMask_navConf()const{ return UBX_GET_VAR_BIT(saveMask, CFG_CFG_SAVEMASK_NAVCONF_MASK, CFG_CFG_SAVEMASK_NAVCONF_OFFSET); }
void ubx::CFG::CFG::_data::saveMask_rxmConf(uint8_t val){ UBX_CHANGE_VAR_BIT(saveMask, val, CFG_CFG_SAVEMASK_RXMCONF_MASK, CFG_CFG_SAVEMASK_RXMCONF_OFFSET); }
uint8_t ubx::CFG::CFG::_data::saveMask_rxmConf()const{ return UBX_GET_VAR_BIT(saveMask, CFG_CFG_SAVEMASK_RXMCONF_MASK, CFG_CFG_SAVEMASK_RXMCONF_OFFSET); }
void ubx::CFG::CFG::_data::saveMask_senConf(uint8_t val){ UBX_CHANGE_VAR_BIT(saveMask, val, CFG_CFG_SAVEMASK_SENCONF_MASK, CFG_CFG_SAVEMASK_SENCONF_OFFSET); }
uint8_t ubx::CFG::CFG::_data::saveMask_senConf()const{ return UBX_GET_VAR_BIT(saveMask, CFG_CFG_SAVEMASK_SENCONF_MASK, CFG_CFG_SAVEMASK_SENCONF_OFFSET); }
void ubx::CFG::CFG::_data::saveMask_rinvConf(uint8_t val){ UBX_CHANGE_VAR_BIT(saveMask, val, CFG_CFG_SAVEMASK_RINVCONF_MASK, CFG_CFG_SAVEMASK_RINVCONF_OFFSET); }
uint8_t ubx::CFG::CFG::_data::saveMask_rinvConf()const{ return UBX_GET_VAR_BIT(saveMask, CFG_CFG_SAVEMASK_RINVCONF_MASK, CFG_CFG_SAVEMASK_RINVCONF_OFFSET); }
void ubx::CFG::CFG::_data::saveMask_antConf(uint8_t val){ UBX_CHANGE_VAR_BIT(saveMask, val, CFG_CFG_SAVEMASK_ANTCONF_MASK, CFG_CFG_SAVEMASK_ANTCONF_OFFSET); }
uint8_t ubx::CFG::CFG::_data::saveMask_antConf()const{ return UBX_GET_VAR_BIT(saveMask, CFG_CFG_SAVEMASK_ANTCONF_MASK, CFG_CFG_SAVEMASK_ANTCONF_OFFSET); }
void ubx::CFG::CFG::_data::saveMask_logConf(uint8_t val){ UBX_CHANGE_VAR_BIT(saveMask, val, CFG_CFG_SAVEMASK_LOGCONF_MASK, CFG_CFG_SAVEMASK_LOGCONF_OFFSET); }
uint8_t ubx::CFG::CFG::_data::saveMask_logConf()const{ return UBX_GET_VAR_BIT(saveMask, CFG_CFG_SAVEMASK_LOGCONF_MASK, CFG_CFG_SAVEMASK_LOGCONF_OFFSET); }
void ubx::CFG::CFG::_data::saveMask_ftsConf(uint8_t val){ UBX_CHANGE_VAR_BIT(saveMask, val, CFG_CFG_SAVEMASK_FTSCONF_MASK, CFG_CFG_SAVEMASK_FTSCONF_OFFSET); }
uint8_t ubx::CFG::CFG::_data::saveMask_ftsConf()const{ return UBX_GET_VAR_BIT(saveMask, CFG_CFG_SAVEMASK_FTSCONF_MASK, CFG_CFG_SAVEMASK_FTSCONF_OFFSET); }

void ubx::CFG::CFG::_data::loadMask_ioPort(uint8_t val){ UBX_CHANGE_VAR_BIT(loadMask, val, CFG_CFG_LOADMASK_IOPORT_MASK, CFG_CFG_LOADMASK_IOPORT_OFFSET); }
uint8_t ubx::CFG::CFG::_data::loadMask_ioPort()const{ return UBX_GET_VAR_BIT(loadMask, CFG_CFG_LOADMASK_IOPORT_MASK, CFG_CFG_LOADMASK_IOPORT_OFFSET); }
void ubx::CFG::CFG::_data::loadMask_msgConf(uint8_t val){ UBX_CHANGE_VAR_BIT(loadMask, val, CFG_CFG_LOADMASK_MSGCONF_MASK, CFG_CFG_LOADMASK_MSGCONF_OFFSET); }
uint8_t ubx::CFG::CFG::_data::loadMask_msgConf()const{ return UBX_GET_VAR_BIT(loadMask, CFG_CFG_LOADMASK_MSGCONF_MASK, CFG_CFG_LOADMASK_MSGCONF_OFFSET); }
void ubx::CFG::CFG::_data::loadMask_infMsg(uint8_t val){ UBX_CHANGE_VAR_BIT(loadMask, val, CFG_CFG_LOADMASK_INFMSG_MASK, CFG_CFG_LOADMASK_INFMSG_OFFSET); }
uint8_t ubx::CFG::CFG::_data::loadMask_infMsg()const{ return UBX_GET_VAR_BIT(loadMask, CFG_CFG_LOADMASK_INFMSG_MASK, CFG_CFG_LOADMASK_INFMSG_OFFSET); }
void ubx::CFG::CFG::_data::loadMask_navConf(uint8_t val){ UBX_CHANGE_VAR_BIT(loadMask, val, CFG_CFG_LOADMASK_NAVCONF_MASK, CFG_CFG_LOADMASK_NAVCONF_OFFSET); }
uint8_t ubx::CFG::CFG::_data::loadMask_navConf()const{ return UBX_GET_VAR_BIT(loadMask, CFG_CFG_LOADMASK_NAVCONF_MASK, CFG_CFG_LOADMASK_NAVCONF_OFFSET); }
void ubx::CFG::CFG::_data::loadMask_rxmConf(uint8_t val){ UBX_CHANGE_VAR_BIT(loadMask, val, CFG_CFG_LOADMASK_RXMCONF_MASK, CFG_CFG_LOADMASK_RXMCONF_OFFSET); }
uint8_t ubx::CFG::CFG::_data::loadMask_rxmConf()const{ return UBX_GET_VAR_BIT(loadMask, CFG_CFG_LOADMASK_RXMCONF_MASK, CFG_CFG_LOADMASK_RXMCONF_OFFSET); }
void ubx::CFG::CFG::_data::loadMask_senConf(uint8_t val){ UBX_CHANGE_VAR_BIT(loadMask, val, CFG_CFG_LOADMASK_SENCONF_MASK, CFG_CFG_LOADMASK_SENCONF_OFFSET); }
uint8_t ubx::CFG::CFG::_data::loadMask_senConf()const{ return UBX_GET_VAR_BIT(loadMask, CFG_CFG_LOADMASK_SENCONF_MASK, CFG_CFG_LOADMASK_SENCONF_OFFSET); }
void ubx::CFG::CFG::_data::loadMask_rinvConf(uint8_t val){ UBX_CHANGE_VAR_BIT(loadMask, val, CFG_CFG_LOADMASK_RINVCONF_MASK, CFG_CFG_LOADMASK_RINVCONF_OFFSET); }
uint8_t ubx::CFG::CFG::_data::loadMask_rinvConf()const{ return UBX_GET_VAR_BIT(loadMask, CFG_CFG_LOADMASK_RINVCONF_MASK, CFG_CFG_LOADMASK_RINVCONF_OFFSET); }
void ubx::CFG::CFG::_data::loadMask_antConf(uint8_t val){ UBX_CHANGE_VAR_BIT(loadMask, val, CFG_CFG_LOADMASK_ANTCONF_MASK, CFG_CFG_LOADMASK_ANTCONF_OFFSET); }
uint8_t ubx::CFG::CFG::_data::loadMask_antConf()const{ return UBX_GET_VAR_BIT(loadMask, CFG_CFG_LOADMASK_ANTCONF_MASK, CFG_CFG_LOADMASK_ANTCONF_OFFSET); }
void ubx::CFG::CFG::_data::loadMask_logConf(uint8_t val){ UBX_CHANGE_VAR_BIT(loadMask, val, CFG_CFG_LOADMASK_LOGCONF_MASK, CFG_CFG_LOADMASK_LOGCONF_OFFSET); }
uint8_t ubx::CFG::CFG::_data::loadMask_logConf()const{ return UBX_GET_VAR_BIT(loadMask, CFG_CFG_LOADMASK_LOGCONF_MASK, CFG_CFG_LOADMASK_LOGCONF_OFFSET); }
void ubx::CFG::CFG::_data::loadMask_ftsConf(uint8_t val){ UBX_CHANGE_VAR_BIT(loadMask, val, CFG_CFG_LOADMASK_FTSCONF_MASK, CFG_CFG_LOADMASK_FTSCONF_OFFSET); }
uint8_t ubx::CFG::CFG::_data::loadMask_ftsConf()const{ return UBX_GET_VAR_BIT(loadMask, CFG_CFG_LOADMASK_FTSCONF_MASK, CFG_CFG_LOADMASK_FTSCONF_OFFSET); }

void ubx::CFG::CFG::_data::deviceMask_devBBR(uint8_t val){ UBX_CHANGE_VAR_BIT(deviceMask, val, CFG_CFG_DEVICEMASK_DEVBBR_MASK, CFG_CFG_DEVICEMASK_DEVBBR_OFFSET); }
uint8_t ubx::CFG::CFG::_data::deviceMask_devBBR()const{ return UBX_GET_VAR_BIT(deviceMask, CFG_CFG_DEVICEMASK_DEVBBR_MASK, CFG_CFG_DEVICEMASK_DEVBBR_OFFSET); }
void ubx::CFG::CFG::_data::deviceMask_devFlash(uint8_t val){ UBX_CHANGE_VAR_BIT(deviceMask, val, CFG_CFG_DEVICEMASK_DEVFLASH_MASK, CFG_CFG_DEVICEMASK_DEVFLASH_OFFSET); }
uint8_t ubx::CFG::CFG::_data::deviceMask_devFlash()const{ return UBX_GET_VAR_BIT(deviceMask, CFG_CFG_DEVICEMASK_DEVFLASH_MASK, CFG_CFG_DEVICEMASK_DEVFLASH_OFFSET); }
void ubx::CFG::CFG::_data::deviceMask_devEEPROM(uint8_t val){ UBX_CHANGE_VAR_BIT(deviceMask, val, CFG_CFG_DEVICEMASK_DEVEEPROM_MASK, CFG_CFG_DEVICEMASK_DEVEEPROM_OFFSET); }
uint8_t ubx::CFG::CFG::_data::deviceMask_devEEPROM()const{ return UBX_GET_VAR_BIT(deviceMask, CFG_CFG_DEVICEMASK_DEVEEPROM_MASK, CFG_CFG_DEVICEMASK_DEVEEPROM_OFFSET); }
void ubx::CFG::CFG::_data::deviceMask_devSpiFlash(uint8_t val){ UBX_CHANGE_VAR_BIT(deviceMask, val, CFG_CFG_DEVICEMASK_DEVSPIFLASH_MASK, CFG_CFG_DEVICEMASK_DEVSPIFLASH_OFFSET); }
uint8_t ubx::CFG::CFG::_data::deviceMask_devSpiFlash()const{ return UBX_GET_VAR_BIT(deviceMask, CFG_CFG_DEVICEMASK_DEVSPIFLASH_MASK, CFG_CFG_DEVICEMASK_DEVSPIFLASH_OFFSET); }
uint8_t ubx::CFG::GNSS::getClassId(void) const { return ubx::CFG::classID; }
uint8_t ubx::CFG::GNSS::getMessageId(void) const { return messageID; }
const std::string &ubx::CFG::GNSS::getClassName(void) const { return classIDName; }
std::string ubx::CFG::GNSS::getMessageName(void) const { return std::string("GNSS"); };
std::string ubx::CFG::GNSS::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"msgVer\":" << std::to_string(data.msgVer) << ", \"numTrkChHw\":" << std::to_string(data.numTrkChHw) << ", \"numTrkChUse\":" << std::to_string(data.numTrkChUse) << ", \"numConfigBlocks\":" << std::to_string(data.numConfigBlocks);
    for (uint16_t i = 0; i < repeatedLen; i++) { ret << ", \"gnssId[" << i << "]\":" << std::to_string(data.repeated[i].gnssId) << ", \"resTrkCh[" << i << "]\":" << std::to_string(data.repeated[i].resTrkCh) << ", \"maxTrkCh[" << i << "]\":" << std::to_string(data.repeated[i].maxTrkCh) << ", \"reserved[" << i << "]\":" << "0" << ", \"flags[" << i << "]\":" << std::to_string(data.repeated[i].flags) << ", \"_flags\":{\"enable\":" << std::to_string(data.repeated_flags_enable(i)) << ", \"sigCfgMask\":" << std::to_string(data.repeated_flags_sigCfgMask(i)) << "}";}
    ret << "}";
    return ret.str();
}
uint8_t* ubx::CFG::GNSS::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::CFG::GNSS::getDataSize(void) const { return sizeof(data) + (repeatedLen * repeatedSize); }

void ubx::CFG::GNSS::_data::repeated_flags_enable(uint8_t val, uint8_t n){ UBX_CHANGE_VAR_BIT(repeated[n].flags, val, CFG_GNSS_REPEATED_FLAGS_ENABLE_MASK, CFG_GNSS_REPEATED_FLAGS_ENABLE_OFFSET); }
uint8_t ubx::CFG::GNSS::_data::repeated_flags_enable(uint8_t n)const{ return UBX_GET_VAR_BIT(repeated[n].flags, CFG_GNSS_REPEATED_FLAGS_ENABLE_MASK, CFG_GNSS_REPEATED_FLAGS_ENABLE_OFFSET); }
void ubx::CFG::GNSS::_data::repeated_flags_sigCfgMask(uint8_t val, uint8_t n){ UBX_CHANGE_VAR_BIT(repeated[n].flags, val, CFG_GNSS_REPEATED_FLAGS_SIGCFGMASK_MASK, CFG_GNSS_REPEATED_FLAGS_SIGCFGMASK_OFFSET); }
uint8_t ubx::CFG::GNSS::_data::repeated_flags_sigCfgMask(uint8_t n)const{ return UBX_GET_VAR_BIT(repeated[n].flags, CFG_GNSS_REPEATED_FLAGS_SIGCFGMASK_MASK, CFG_GNSS_REPEATED_FLAGS_SIGCFGMASK_OFFSET); }
const uint16_t ubx::CFG::GNSS::repeatedSize = sizeof(struct ubx::CFG::GNSS::_data::_repeated);
uint8_t ubx::CFG::INF::getClassId(void) const { return ubx::CFG::classID; }
uint8_t ubx::CFG::INF::getMessageId(void) const { return messageID; }
const std::string &ubx::CFG::INF::getClassName(void) const { return classIDName; }
std::string ubx::CFG::INF::getMessageName(void) const { return std::string("INF"); };
std::string ubx::CFG::INF::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    for (uint16_t i = 0; i < repeatedLen; i++) { ret << ", \"protocolID[" << i << "]\":" << std::to_string(data.repeated[i].protocolID) << ", \"reserved1[" << i << "]\":" << "0" << ", \"infMsgMask[" << i << "]\":" << std::to_string(data.repeated[i].infMsgMask) << ", \"_infMsgMask\":{\"ERROR\":" << std::to_string(data.repeated_infMsgMask_ERROR(i)) << ", \"WARNING\":" << std::to_string(data.repeated_infMsgMask_WARNING(i)) << ", \"NOTICE\":" << std::to_string(data.repeated_infMsgMask_NOTICE(i)) << ", \"TEST\":" << std::to_string(data.repeated_infMsgMask_TEST(i)) << ", \"DEBUG\":" << std::to_string(data.repeated_infMsgMask_DEBUG(i)) << "}" << ", \"infMsgMaskUnused[" << i << "]\":" << "[" << std::to_string(data.repeated[i].infMsgMaskUnused[0])<< "," << std::to_string(data.repeated[i].infMsgMaskUnused[1])<< "," << std::to_string(data.repeated[i].infMsgMaskUnused[2])<< "," << std::to_string(data.repeated[i].infMsgMaskUnused[3])<< "," << std::to_string(data.repeated[i].infMsgMaskUnused[4])<< "]";}
    ret << "}";
    return ret.str();
}
uint8_t* ubx::CFG::INF::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::CFG::INF::getDataSize(void) const { return sizeof(data) + (repeatedLen * repeatedSize); }

void ubx::CFG::INF::_data::repeated_infMsgMask_ERROR(uint8_t val, uint8_t n){ UBX_CHANGE_VAR_BIT(repeated[n].infMsgMask, val, CFG_INF_REPEATED_INFMSGMASK_ERROR_MASK, CFG_INF_REPEATED_INFMSGMASK_ERROR_OFFSET); }
uint8_t ubx::CFG::INF::_data::repeated_infMsgMask_ERROR(uint8_t n)const{ return UBX_GET_VAR_BIT(repeated[n].infMsgMask, CFG_INF_REPEATED_INFMSGMASK_ERROR_MASK, CFG_INF_REPEATED_INFMSGMASK_ERROR_OFFSET); }
void ubx::CFG::INF::_data::repeated_infMsgMask_WARNING(uint8_t val, uint8_t n){ UBX_CHANGE_VAR_BIT(repeated[n].infMsgMask, val, CFG_INF_REPEATED_INFMSGMASK_WARNING_MASK, CFG_INF_REPEATED_INFMSGMASK_WARNING_OFFSET); }
uint8_t ubx::CFG::INF::_data::repeated_infMsgMask_WARNING(uint8_t n)const{ return UBX_GET_VAR_BIT(repeated[n].infMsgMask, CFG_INF_REPEATED_INFMSGMASK_WARNING_MASK, CFG_INF_REPEATED_INFMSGMASK_WARNING_OFFSET); }
void ubx::CFG::INF::_data::repeated_infMsgMask_NOTICE(uint8_t val, uint8_t n){ UBX_CHANGE_VAR_BIT(repeated[n].infMsgMask, val, CFG_INF_REPEATED_INFMSGMASK_NOTICE_MASK, CFG_INF_REPEATED_INFMSGMASK_NOTICE_OFFSET); }
uint8_t ubx::CFG::INF::_data::repeated_infMsgMask_NOTICE(uint8_t n)const{ return UBX_GET_VAR_BIT(repeated[n].infMsgMask, CFG_INF_REPEATED_INFMSGMASK_NOTICE_MASK, CFG_INF_REPEATED_INFMSGMASK_NOTICE_OFFSET); }
void ubx::CFG::INF::_data::repeated_infMsgMask_TEST(uint8_t val, uint8_t n){ UBX_CHANGE_VAR_BIT(repeated[n].infMsgMask, val, CFG_INF_REPEATED_INFMSGMASK_TEST_MASK, CFG_INF_REPEATED_INFMSGMASK_TEST_OFFSET); }
uint8_t ubx::CFG::INF::_data::repeated_infMsgMask_TEST(uint8_t n)const{ return UBX_GET_VAR_BIT(repeated[n].infMsgMask, CFG_INF_REPEATED_INFMSGMASK_TEST_MASK, CFG_INF_REPEATED_INFMSGMASK_TEST_OFFSET); }
void ubx::CFG::INF::_data::repeated_infMsgMask_DEBUG(uint8_t val, uint8_t n){ UBX_CHANGE_VAR_BIT(repeated[n].infMsgMask, val, CFG_INF_REPEATED_INFMSGMASK_DEBUG_MASK, CFG_INF_REPEATED_INFMSGMASK_DEBUG_OFFSET); }
uint8_t ubx::CFG::INF::_data::repeated_infMsgMask_DEBUG(uint8_t n)const{ return UBX_GET_VAR_BIT(repeated[n].infMsgMask, CFG_INF_REPEATED_INFMSGMASK_DEBUG_MASK, CFG_INF_REPEATED_INFMSGMASK_DEBUG_OFFSET); }
const uint16_t ubx::CFG::INF::repeatedSize = sizeof(struct ubx::CFG::INF::_data::_repeated);
uint8_t ubx::CFG::LOGFILTER::getClassId(void) const { return ubx::CFG::classID; }
uint8_t ubx::CFG::LOGFILTER::getMessageId(void) const { return messageID; }
const std::string &ubx::CFG::LOGFILTER::getClassName(void) const { return classIDName; }
std::string ubx::CFG::LOGFILTER::getMessageName(void) const { return std::string("LOGFILTER"); };
std::string ubx::CFG::LOGFILTER::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"version\":" << std::to_string(data.version) << ", \"flags\":" << std::to_string(data.flags) << ", \"_flags\":{\"recordEnabled\":" << std::to_string(data.flags_recordEnabled()) << ", \"psmOncePerWakupEnabled\":" << std::to_string(data.flags_psmOncePerWakupEnabled()) << ", \"applyAllFilterSettings\":" << std::to_string(data.flags_applyAllFilterSettings()) << "}" << ", \"minInterval\":" << std::to_string(data.minInterval) << ", \"timeThreshold\":" << std::to_string(data.timeThreshold) << ", \"speedThreshold\":" << std::to_string(data.speedThreshold) << ", \"positionThreshold\":" << std::to_string(data.positionThreshold);
    ret << "}";
    return ret.str();
}
uint8_t* ubx::CFG::LOGFILTER::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::CFG::LOGFILTER::getDataSize(void) const { return sizeof(data); }

void ubx::CFG::LOGFILTER::_data::flags_recordEnabled(uint8_t val){ UBX_CHANGE_VAR_BIT(flags, val, CFG_LOGFILTER_FLAGS_RECORDENABLED_MASK, CFG_LOGFILTER_FLAGS_RECORDENABLED_OFFSET); }
uint8_t ubx::CFG::LOGFILTER::_data::flags_recordEnabled()const{ return UBX_GET_VAR_BIT(flags, CFG_LOGFILTER_FLAGS_RECORDENABLED_MASK, CFG_LOGFILTER_FLAGS_RECORDENABLED_OFFSET); }
void ubx::CFG::LOGFILTER::_data::flags_psmOncePerWakupEnabled(uint8_t val){ UBX_CHANGE_VAR_BIT(flags, val, CFG_LOGFILTER_FLAGS_PSMONCEPERWAKUPENABLED_MASK, CFG_LOGFILTER_FLAGS_PSMONCEPERWAKUPENABLED_OFFSET); }
uint8_t ubx::CFG::LOGFILTER::_data::flags_psmOncePerWakupEnabled()const{ return UBX_GET_VAR_BIT(flags, CFG_LOGFILTER_FLAGS_PSMONCEPERWAKUPENABLED_MASK, CFG_LOGFILTER_FLAGS_PSMONCEPERWAKUPENABLED_OFFSET); }
void ubx::CFG::LOGFILTER::_data::flags_applyAllFilterSettings(uint8_t val){ UBX_CHANGE_VAR_BIT(flags, val, CFG_LOGFILTER_FLAGS_APPLYALLFILTERSETTINGS_MASK, CFG_LOGFILTER_FLAGS_APPLYALLFILTERSETTINGS_OFFSET); }
uint8_t ubx::CFG::LOGFILTER::_data::flags_applyAllFilterSettings()const{ return UBX_GET_VAR_BIT(flags, CFG_LOGFILTER_FLAGS_APPLYALLFILTERSETTINGS_MASK, CFG_LOGFILTER_FLAGS_APPLYALLFILTERSETTINGS_OFFSET); }
uint8_t ubx::CFG::MSG::getClassId(void) const { return ubx::CFG::classID; }
uint8_t ubx::CFG::MSG::getMessageId(void) const { return messageID; }
const std::string &ubx::CFG::MSG::getClassName(void) const { return classIDName; }
std::string ubx::CFG::MSG::getMessageName(void) const { return std::string("MSG"); };
std::string ubx::CFG::MSG::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"msgClass\":" << std::to_string(data.msgClass) << ", \"msgID\":" << std::to_string(data.msgID) << ", \"rate\":" << "[" << std::to_string(data.rate[0])<< "," << std::to_string(data.rate[1])<< "," << std::to_string(data.rate[2])<< "," << std::to_string(data.rate[3])<< "," << std::to_string(data.rate[4])<< "," << std::to_string(data.rate[5])<< "]";
    ret << "}";
    return ret.str();
}
uint8_t* ubx::CFG::MSG::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::CFG::MSG::getDataSize(void) const { return sizeof(data); }
uint8_t ubx::CFG::NAVX5::getClassId(void) const { return ubx::CFG::classID; }
uint8_t ubx::CFG::NAVX5::getMessageId(void) const { return messageID; }
const std::string &ubx::CFG::NAVX5::getClassName(void) const { return classIDName; }
std::string ubx::CFG::NAVX5::getMessageName(void) const { return std::string("NAVX5"); };
std::string ubx::CFG::NAVX5::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"version\":" << std::to_string(data.version) << ", \"mask1\":" << std::to_string(data.mask1) << ", \"_mask1\":{\"minMax\":" << std::to_string(data.mask1_minMax()) << ", \"minCno\":" << std::to_string(data.mask1_minCno()) << ", \"initial3dfix\":" << std::to_string(data.mask1_initial3dfix()) << ", \"wknRoll\":" << std::to_string(data.mask1_wknRoll()) << ", \"ackAid\":" << std::to_string(data.mask1_ackAid()) << ", \"ppp\":" << std::to_string(data.mask1_ppp()) << ", \"aop\":" << std::to_string(data.mask1_aop()) << "}" << ", \"mask2\":" << std::to_string(data.mask2) << ", \"_mask2\":{\"adr\":" << std::to_string(data.mask2_adr()) << "}" << ", \"reserved1\":" << "0" << ", \"minSVs\":" << std::to_string(data.minSVs) << ", \"maxSVs\":" << std::to_string(data.maxSVs) << ", \"minCNO\":" << std::to_string(data.minCNO) << ", \"reserved2\":" << "0" << ", \"iniFix3D\":" << std::to_string(data.iniFix3D) << ", \"reserved3\":" << "0" << ", \"ackAiding\":" << std::to_string(data.ackAiding) << ", \"wknRollover\":" << std::to_string(data.wknRollover) << ", \"sigAttenCompMode\":" << std::to_string(data.sigAttenCompMode) << ", \"reserved4\":" << "0" << ", \"usePPP\":" << std::to_string(data.usePPP) << ", \"aopCfg\":" << std::to_string(data.aopCfg) << ", \"_aopCfg\":{\"useAOP\":" << std::to_string(data.aopCfg_useAOP()) << "}" << ", \"reserved5\":" << "0" << ", \"aopOrbMaxErr\":" << std::to_string(data.aopOrbMaxErr) << ", \"reserved6\":" << "0" << ", \"reserved7\":" << "0" << ", \"useAdr\":" << std::to_string(data.useAdr);
    ret << "}";
    return ret.str();
}
uint8_t* ubx::CFG::NAVX5::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::CFG::NAVX5::getDataSize(void) const { return sizeof(data); }

void ubx::CFG::NAVX5::_data::mask1_minMax(uint8_t val){ UBX_CHANGE_VAR_BIT(mask1, val, CFG_NAVX5_MASK1_MINMAX_MASK, CFG_NAVX5_MASK1_MINMAX_OFFSET); }
uint8_t ubx::CFG::NAVX5::_data::mask1_minMax()const{ return UBX_GET_VAR_BIT(mask1, CFG_NAVX5_MASK1_MINMAX_MASK, CFG_NAVX5_MASK1_MINMAX_OFFSET); }
void ubx::CFG::NAVX5::_data::mask1_minCno(uint8_t val){ UBX_CHANGE_VAR_BIT(mask1, val, CFG_NAVX5_MASK1_MINCNO_MASK, CFG_NAVX5_MASK1_MINCNO_OFFSET); }
uint8_t ubx::CFG::NAVX5::_data::mask1_minCno()const{ return UBX_GET_VAR_BIT(mask1, CFG_NAVX5_MASK1_MINCNO_MASK, CFG_NAVX5_MASK1_MINCNO_OFFSET); }
void ubx::CFG::NAVX5::_data::mask1_initial3dfix(uint8_t val){ UBX_CHANGE_VAR_BIT(mask1, val, CFG_NAVX5_MASK1_INITIAL3DFIX_MASK, CFG_NAVX5_MASK1_INITIAL3DFIX_OFFSET); }
uint8_t ubx::CFG::NAVX5::_data::mask1_initial3dfix()const{ return UBX_GET_VAR_BIT(mask1, CFG_NAVX5_MASK1_INITIAL3DFIX_MASK, CFG_NAVX5_MASK1_INITIAL3DFIX_OFFSET); }
void ubx::CFG::NAVX5::_data::mask1_wknRoll(uint8_t val){ UBX_CHANGE_VAR_BIT(mask1, val, CFG_NAVX5_MASK1_WKNROLL_MASK, CFG_NAVX5_MASK1_WKNROLL_OFFSET); }
uint8_t ubx::CFG::NAVX5::_data::mask1_wknRoll()const{ return UBX_GET_VAR_BIT(mask1, CFG_NAVX5_MASK1_WKNROLL_MASK, CFG_NAVX5_MASK1_WKNROLL_OFFSET); }
void ubx::CFG::NAVX5::_data::mask1_ackAid(uint8_t val){ UBX_CHANGE_VAR_BIT(mask1, val, CFG_NAVX5_MASK1_ACKAID_MASK, CFG_NAVX5_MASK1_ACKAID_OFFSET); }
uint8_t ubx::CFG::NAVX5::_data::mask1_ackAid()const{ return UBX_GET_VAR_BIT(mask1, CFG_NAVX5_MASK1_ACKAID_MASK, CFG_NAVX5_MASK1_ACKAID_OFFSET); }
void ubx::CFG::NAVX5::_data::mask1_ppp(uint8_t val){ UBX_CHANGE_VAR_BIT(mask1, val, CFG_NAVX5_MASK1_PPP_MASK, CFG_NAVX5_MASK1_PPP_OFFSET); }
uint8_t ubx::CFG::NAVX5::_data::mask1_ppp()const{ return UBX_GET_VAR_BIT(mask1, CFG_NAVX5_MASK1_PPP_MASK, CFG_NAVX5_MASK1_PPP_OFFSET); }
void ubx::CFG::NAVX5::_data::mask1_aop(uint8_t val){ UBX_CHANGE_VAR_BIT(mask1, val, CFG_NAVX5_MASK1_AOP_MASK, CFG_NAVX5_MASK1_AOP_OFFSET); }
uint8_t ubx::CFG::NAVX5::_data::mask1_aop()const{ return UBX_GET_VAR_BIT(mask1, CFG_NAVX5_MASK1_AOP_MASK, CFG_NAVX5_MASK1_AOP_OFFSET); }

void ubx::CFG::NAVX5::_data::mask2_adr(uint8_t val){ UBX_CHANGE_VAR_BIT(mask2, val, CFG_NAVX5_MASK2_ADR_MASK, CFG_NAVX5_MASK2_ADR_OFFSET); }
uint8_t ubx::CFG::NAVX5::_data::mask2_adr()const{ return UBX_GET_VAR_BIT(mask2, CFG_NAVX5_MASK2_ADR_MASK, CFG_NAVX5_MASK2_ADR_OFFSET); }

void ubx::CFG::NAVX5::_data::aopCfg_useAOP(uint8_t val){ UBX_CHANGE_VAR_BIT(aopCfg, val, CFG_NAVX5_AOPCFG_USEAOP_MASK, CFG_NAVX5_AOPCFG_USEAOP_OFFSET); }
uint8_t ubx::CFG::NAVX5::_data::aopCfg_useAOP()const{ return UBX_GET_VAR_BIT(aopCfg, CFG_NAVX5_AOPCFG_USEAOP_MASK, CFG_NAVX5_AOPCFG_USEAOP_OFFSET); }
uint8_t ubx::CFG::PM2::getClassId(void) const { return ubx::CFG::classID; }
uint8_t ubx::CFG::PM2::getMessageId(void) const { return messageID; }
const std::string &ubx::CFG::PM2::getClassName(void) const { return classIDName; }
std::string ubx::CFG::PM2::getMessageName(void) const { return std::string("PM2"); };
std::string ubx::CFG::PM2::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"version\":" << std::to_string(data.version) << ", \"reserved1\":" << "0" << ", \"maxStartupStateDur\":" << std::to_string(data.maxStartupStateDur) << ", \"reserved2\":" << "0" << ", \"flags\":" << std::to_string(data.flags) << ", \"_flags\":{\"optTarget\":" << std::to_string(data.flags_optTarget()) << ", \"extintSel\":" << std::to_string(data.flags_extintSel()) << ", \"extintWake\":" << std::to_string(data.flags_extintWake()) << ", \"extintBackup\":" << std::to_string(data.flags_extintBackup()) << ", \"extintInactiv\":" << std::to_string(data.flags_extintInactiv()) << ", \"limitPeakCurr\":" << std::to_string(data.flags_limitPeakCurr()) << ", \"waitTimeFix\":" << std::to_string(data.flags_waitTimeFix()) << ", \"updateRTC\":" << std::to_string(data.flags_updateRTC()) << ", \"updateEPH\":" << std::to_string(data.flags_updateEPH()) << ", \"doNotEnterOff\":" << std::to_string(data.flags_doNotEnterOff()) << ", \"mode\":" << std::to_string(data.flags_mode()) << "}" << ", \"updatePeriod\":" << std::to_string(data.updatePeriod) << ", \"searchPeriod\":" << std::to_string(data.searchPeriod) << ", \"gridOffset\":" << std::to_string(data.gridOffset) << ", \"onTime\":" << std::to_string(data.onTime) << ", \"minAcqTime\":" << std::to_string(data.minAcqTime) << ", \"reserved3\":" << "0" << ", \"extintInactivityMs\":" << std::to_string(data.extintInactivityMs);
    ret << "}";
    return ret.str();
}
uint8_t* ubx::CFG::PM2::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::CFG::PM2::getDataSize(void) const { return sizeof(data); }

void ubx::CFG::PM2::_data::flags_optTarget(uint8_t val){ UBX_CHANGE_VAR_BIT(flags, val, CFG_PM2_FLAGS_OPTTARGET_MASK, CFG_PM2_FLAGS_OPTTARGET_OFFSET); }
uint8_t ubx::CFG::PM2::_data::flags_optTarget()const{ return UBX_GET_VAR_BIT(flags, CFG_PM2_FLAGS_OPTTARGET_MASK, CFG_PM2_FLAGS_OPTTARGET_OFFSET); }
void ubx::CFG::PM2::_data::flags_extintSel(uint8_t val){ UBX_CHANGE_VAR_BIT(flags, val, CFG_PM2_FLAGS_EXTINTSEL_MASK, CFG_PM2_FLAGS_EXTINTSEL_OFFSET); }
uint8_t ubx::CFG::PM2::_data::flags_extintSel()const{ return UBX_GET_VAR_BIT(flags, CFG_PM2_FLAGS_EXTINTSEL_MASK, CFG_PM2_FLAGS_EXTINTSEL_OFFSET); }
void ubx::CFG::PM2::_data::flags_extintWake(uint8_t val){ UBX_CHANGE_VAR_BIT(flags, val, CFG_PM2_FLAGS_EXTINTWAKE_MASK, CFG_PM2_FLAGS_EXTINTWAKE_OFFSET); }
uint8_t ubx::CFG::PM2::_data::flags_extintWake()const{ return UBX_GET_VAR_BIT(flags, CFG_PM2_FLAGS_EXTINTWAKE_MASK, CFG_PM2_FLAGS_EXTINTWAKE_OFFSET); }
void ubx::CFG::PM2::_data::flags_extintBackup(uint8_t val){ UBX_CHANGE_VAR_BIT(flags, val, CFG_PM2_FLAGS_EXTINTBACKUP_MASK, CFG_PM2_FLAGS_EXTINTBACKUP_OFFSET); }
uint8_t ubx::CFG::PM2::_data::flags_extintBackup()const{ return UBX_GET_VAR_BIT(flags, CFG_PM2_FLAGS_EXTINTBACKUP_MASK, CFG_PM2_FLAGS_EXTINTBACKUP_OFFSET); }
void ubx::CFG::PM2::_data::flags_extintInactiv(uint8_t val){ UBX_CHANGE_VAR_BIT(flags, val, CFG_PM2_FLAGS_EXTINTINACTIV_MASK, CFG_PM2_FLAGS_EXTINTINACTIV_OFFSET); }
uint8_t ubx::CFG::PM2::_data::flags_extintInactiv()const{ return UBX_GET_VAR_BIT(flags, CFG_PM2_FLAGS_EXTINTINACTIV_MASK, CFG_PM2_FLAGS_EXTINTINACTIV_OFFSET); }
void ubx::CFG::PM2::_data::flags_limitPeakCurr(uint8_t val){ UBX_CHANGE_VAR_BIT(flags, val, CFG_PM2_FLAGS_LIMITPEAKCURR_MASK, CFG_PM2_FLAGS_LIMITPEAKCURR_OFFSET); }
uint8_t ubx::CFG::PM2::_data::flags_limitPeakCurr()const{ return UBX_GET_VAR_BIT(flags, CFG_PM2_FLAGS_LIMITPEAKCURR_MASK, CFG_PM2_FLAGS_LIMITPEAKCURR_OFFSET); }
void ubx::CFG::PM2::_data::flags_waitTimeFix(uint8_t val){ UBX_CHANGE_VAR_BIT(flags, val, CFG_PM2_FLAGS_WAITTIMEFIX_MASK, CFG_PM2_FLAGS_WAITTIMEFIX_OFFSET); }
uint8_t ubx::CFG::PM2::_data::flags_waitTimeFix()const{ return UBX_GET_VAR_BIT(flags, CFG_PM2_FLAGS_WAITTIMEFIX_MASK, CFG_PM2_FLAGS_WAITTIMEFIX_OFFSET); }
void ubx::CFG::PM2::_data::flags_updateRTC(uint8_t val){ UBX_CHANGE_VAR_BIT(flags, val, CFG_PM2_FLAGS_UPDATERTC_MASK, CFG_PM2_FLAGS_UPDATERTC_OFFSET); }
uint8_t ubx::CFG::PM2::_data::flags_updateRTC()const{ return UBX_GET_VAR_BIT(flags, CFG_PM2_FLAGS_UPDATERTC_MASK, CFG_PM2_FLAGS_UPDATERTC_OFFSET); }
void ubx::CFG::PM2::_data::flags_updateEPH(uint8_t val){ UBX_CHANGE_VAR_BIT(flags, val, CFG_PM2_FLAGS_UPDATEEPH_MASK, CFG_PM2_FLAGS_UPDATEEPH_OFFSET); }
uint8_t ubx::CFG::PM2::_data::flags_updateEPH()const{ return UBX_GET_VAR_BIT(flags, CFG_PM2_FLAGS_UPDATEEPH_MASK, CFG_PM2_FLAGS_UPDATEEPH_OFFSET); }
void ubx::CFG::PM2::_data::flags_doNotEnterOff(uint8_t val){ UBX_CHANGE_VAR_BIT(flags, val, CFG_PM2_FLAGS_DONOTENTEROFF_MASK, CFG_PM2_FLAGS_DONOTENTEROFF_OFFSET); }
uint8_t ubx::CFG::PM2::_data::flags_doNotEnterOff()const{ return UBX_GET_VAR_BIT(flags, CFG_PM2_FLAGS_DONOTENTEROFF_MASK, CFG_PM2_FLAGS_DONOTENTEROFF_OFFSET); }
void ubx::CFG::PM2::_data::flags_mode(uint8_t val){ UBX_CHANGE_VAR_BIT(flags, val, CFG_PM2_FLAGS_MODE_MASK, CFG_PM2_FLAGS_MODE_OFFSET); }
uint8_t ubx::CFG::PM2::_data::flags_mode()const{ return UBX_GET_VAR_BIT(flags, CFG_PM2_FLAGS_MODE_MASK, CFG_PM2_FLAGS_MODE_OFFSET); }
uint8_t ubx::CFG::PMS::getClassId(void) const { return ubx::CFG::classID; }
uint8_t ubx::CFG::PMS::getMessageId(void) const { return messageID; }
const std::string &ubx::CFG::PMS::getClassName(void) const { return classIDName; }
std::string ubx::CFG::PMS::getMessageName(void) const { return std::string("PMS"); };
std::string ubx::CFG::PMS::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"version\":" << std::to_string(data.version) << ", \"powerSetupValue\":" << std::to_string(data.powerSetupValue) << ", \"period\":" << std::to_string(data.period) << ", \"onTime\":" << std::to_string(data.onTime) << ", \"reserved\":" << "0";
    ret << "}";
    return ret.str();
}
uint8_t* ubx::CFG::PMS::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::CFG::PMS::getDataSize(void) const { return sizeof(data); }
uint8_t ubx::CFG::PRT::getClassId(void) const { return ubx::CFG::classID; }
uint8_t ubx::CFG::PRT::getMessageId(void) const { return messageID; }
const std::string &ubx::CFG::PRT::getClassName(void) const { return classIDName; }
std::string ubx::CFG::PRT::getMessageName(void) const { return std::string("PRT"); };
std::string ubx::CFG::PRT::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"portID\":" << std::to_string(data.portID) << ", \"reserved1\":" << "0" << ", \"txReady\":" << std::to_string(data.txReady) << ", \"_txReady\":{\"en\":" << std::to_string(data.txReady_en()) << ", \"pol\":" << std::to_string(data.txReady_pol()) << ", \"pin\":" << std::to_string(data.txReady_pin()) << ", \"thres\":" << std::to_string(data.txReady_thres()) << "}" << ", \"mode\":" << std::to_string(data.mode) << ", \"_mode\":{\"charLen\":" << std::to_string(data.mode_charLen()) << ", \"parity\":" << std::to_string(data.mode_parity()) << ", \"nStopBits\":" << std::to_string(data.mode_nStopBits()) << "}" << ", \"baudRate\":" << std::to_string(data.baudRate) << ", \"inProtoMask\":" << std::to_string(data.inProtoMask) << ", \"_inProtoMask\":{\"inUbx\":" << std::to_string(data.inProtoMask_inUbx()) << ", \"inNmea\":" << std::to_string(data.inProtoMask_inNmea()) << ", \"inRtcm\":" << std::to_string(data.inProtoMask_inRtcm()) << ", \"inRtcm3\":" << std::to_string(data.inProtoMask_inRtcm3()) << "}" << ", \"outProtoMask\":" << std::to_string(data.outProtoMask) << ", \"_outProtoMask\":{\"outUbx\":" << std::to_string(data.outProtoMask_outUbx()) << ", \"outNmea\":" << std::to_string(data.outProtoMask_outNmea()) << ", \"inRtcm3\":" << std::to_string(data.outProtoMask_inRtcm3()) << "}" << ", \"flags\":" << std::to_string(data.flags) << ", \"_flags\":{\"extendedTxTimeout\":" << std::to_string(data.flags_extendedTxTimeout()) << "}" << ", \"reserved2\":" << "0";
    ret << "}";
    return ret.str();
}
uint8_t* ubx::CFG::PRT::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::CFG::PRT::getDataSize(void) const { return sizeof(data); }

void ubx::CFG::PRT::_data::txReady_en(uint8_t val){ UBX_CHANGE_VAR_BIT(txReady, val, CFG_PRT_TXREADY_EN_MASK, CFG_PRT_TXREADY_EN_OFFSET); }
uint8_t ubx::CFG::PRT::_data::txReady_en()const{ return UBX_GET_VAR_BIT(txReady, CFG_PRT_TXREADY_EN_MASK, CFG_PRT_TXREADY_EN_OFFSET); }
void ubx::CFG::PRT::_data::txReady_pol(uint8_t val){ UBX_CHANGE_VAR_BIT(txReady, val, CFG_PRT_TXREADY_POL_MASK, CFG_PRT_TXREADY_POL_OFFSET); }
uint8_t ubx::CFG::PRT::_data::txReady_pol()const{ return UBX_GET_VAR_BIT(txReady, CFG_PRT_TXREADY_POL_MASK, CFG_PRT_TXREADY_POL_OFFSET); }
void ubx::CFG::PRT::_data::txReady_pin(uint8_t val){ UBX_CHANGE_VAR_BIT(txReady, val, CFG_PRT_TXREADY_PIN_MASK, CFG_PRT_TXREADY_PIN_OFFSET); }
uint8_t ubx::CFG::PRT::_data::txReady_pin()const{ return UBX_GET_VAR_BIT(txReady, CFG_PRT_TXREADY_PIN_MASK, CFG_PRT_TXREADY_PIN_OFFSET); }
void ubx::CFG::PRT::_data::txReady_thres(uint8_t val){ UBX_CHANGE_VAR_BIT(txReady, val, CFG_PRT_TXREADY_THRES_MASK, CFG_PRT_TXREADY_THRES_OFFSET); }
uint8_t ubx::CFG::PRT::_data::txReady_thres()const{ return UBX_GET_VAR_BIT(txReady, CFG_PRT_TXREADY_THRES_MASK, CFG_PRT_TXREADY_THRES_OFFSET); }

void ubx::CFG::PRT::_data::mode_charLen(uint8_t val){ UBX_CHANGE_VAR_BIT(mode, val, CFG_PRT_MODE_CHARLEN_MASK, CFG_PRT_MODE_CHARLEN_OFFSET); }
uint8_t ubx::CFG::PRT::_data::mode_charLen()const{ return UBX_GET_VAR_BIT(mode, CFG_PRT_MODE_CHARLEN_MASK, CFG_PRT_MODE_CHARLEN_OFFSET); }
void ubx::CFG::PRT::_data::mode_parity(uint8_t val){ UBX_CHANGE_VAR_BIT(mode, val, CFG_PRT_MODE_PARITY_MASK, CFG_PRT_MODE_PARITY_OFFSET); }
uint8_t ubx::CFG::PRT::_data::mode_parity()const{ return UBX_GET_VAR_BIT(mode, CFG_PRT_MODE_PARITY_MASK, CFG_PRT_MODE_PARITY_OFFSET); }
void ubx::CFG::PRT::_data::mode_nStopBits(uint8_t val){ UBX_CHANGE_VAR_BIT(mode, val, CFG_PRT_MODE_NSTOPBITS_MASK, CFG_PRT_MODE_NSTOPBITS_OFFSET); }
uint8_t ubx::CFG::PRT::_data::mode_nStopBits()const{ return UBX_GET_VAR_BIT(mode, CFG_PRT_MODE_NSTOPBITS_MASK, CFG_PRT_MODE_NSTOPBITS_OFFSET); }

void ubx::CFG::PRT::_data::inProtoMask_inUbx(uint8_t val){ UBX_CHANGE_VAR_BIT(inProtoMask, val, CFG_PRT_INPROTOMASK_INUBX_MASK, CFG_PRT_INPROTOMASK_INUBX_OFFSET); }
uint8_t ubx::CFG::PRT::_data::inProtoMask_inUbx()const{ return UBX_GET_VAR_BIT(inProtoMask, CFG_PRT_INPROTOMASK_INUBX_MASK, CFG_PRT_INPROTOMASK_INUBX_OFFSET); }
void ubx::CFG::PRT::_data::inProtoMask_inNmea(uint8_t val){ UBX_CHANGE_VAR_BIT(inProtoMask, val, CFG_PRT_INPROTOMASK_INNMEA_MASK, CFG_PRT_INPROTOMASK_INNMEA_OFFSET); }
uint8_t ubx::CFG::PRT::_data::inProtoMask_inNmea()const{ return UBX_GET_VAR_BIT(inProtoMask, CFG_PRT_INPROTOMASK_INNMEA_MASK, CFG_PRT_INPROTOMASK_INNMEA_OFFSET); }
void ubx::CFG::PRT::_data::inProtoMask_inRtcm(uint8_t val){ UBX_CHANGE_VAR_BIT(inProtoMask, val, CFG_PRT_INPROTOMASK_INRTCM_MASK, CFG_PRT_INPROTOMASK_INRTCM_OFFSET); }
uint8_t ubx::CFG::PRT::_data::inProtoMask_inRtcm()const{ return UBX_GET_VAR_BIT(inProtoMask, CFG_PRT_INPROTOMASK_INRTCM_MASK, CFG_PRT_INPROTOMASK_INRTCM_OFFSET); }
void ubx::CFG::PRT::_data::inProtoMask_inRtcm3(uint8_t val){ UBX_CHANGE_VAR_BIT(inProtoMask, val, CFG_PRT_INPROTOMASK_INRTCM3_MASK, CFG_PRT_INPROTOMASK_INRTCM3_OFFSET); }
uint8_t ubx::CFG::PRT::_data::inProtoMask_inRtcm3()const{ return UBX_GET_VAR_BIT(inProtoMask, CFG_PRT_INPROTOMASK_INRTCM3_MASK, CFG_PRT_INPROTOMASK_INRTCM3_OFFSET); }

void ubx::CFG::PRT::_data::outProtoMask_outUbx(uint8_t val){ UBX_CHANGE_VAR_BIT(outProtoMask, val, CFG_PRT_OUTPROTOMASK_OUTUBX_MASK, CFG_PRT_OUTPROTOMASK_OUTUBX_OFFSET); }
uint8_t ubx::CFG::PRT::_data::outProtoMask_outUbx()const{ return UBX_GET_VAR_BIT(outProtoMask, CFG_PRT_OUTPROTOMASK_OUTUBX_MASK, CFG_PRT_OUTPROTOMASK_OUTUBX_OFFSET); }
void ubx::CFG::PRT::_data::outProtoMask_outNmea(uint8_t val){ UBX_CHANGE_VAR_BIT(outProtoMask, val, CFG_PRT_OUTPROTOMASK_OUTNMEA_MASK, CFG_PRT_OUTPROTOMASK_OUTNMEA_OFFSET); }
uint8_t ubx::CFG::PRT::_data::outProtoMask_outNmea()const{ return UBX_GET_VAR_BIT(outProtoMask, CFG_PRT_OUTPROTOMASK_OUTNMEA_MASK, CFG_PRT_OUTPROTOMASK_OUTNMEA_OFFSET); }
void ubx::CFG::PRT::_data::outProtoMask_inRtcm3(uint8_t val){ UBX_CHANGE_VAR_BIT(outProtoMask, val, CFG_PRT_OUTPROTOMASK_INRTCM3_MASK, CFG_PRT_OUTPROTOMASK_INRTCM3_OFFSET); }
uint8_t ubx::CFG::PRT::_data::outProtoMask_inRtcm3()const{ return UBX_GET_VAR_BIT(outProtoMask, CFG_PRT_OUTPROTOMASK_INRTCM3_MASK, CFG_PRT_OUTPROTOMASK_INRTCM3_OFFSET); }

void ubx::CFG::PRT::_data::flags_extendedTxTimeout(uint8_t val){ UBX_CHANGE_VAR_BIT(flags, val, CFG_PRT_FLAGS_EXTENDEDTXTIMEOUT_MASK, CFG_PRT_FLAGS_EXTENDEDTXTIMEOUT_OFFSET); }
uint8_t ubx::CFG::PRT::_data::flags_extendedTxTimeout()const{ return UBX_GET_VAR_BIT(flags, CFG_PRT_FLAGS_EXTENDEDTXTIMEOUT_MASK, CFG_PRT_FLAGS_EXTENDEDTXTIMEOUT_OFFSET); }
uint8_t ubx::CFG::PRT_GET::getClassId(void) const { return ubx::CFG::classID; }
uint8_t ubx::CFG::PRT_GET::getMessageId(void) const { return messageID; }
const std::string &ubx::CFG::PRT_GET::getClassName(void) const { return classIDName; }
std::string ubx::CFG::PRT_GET::getMessageName(void) const { return std::string("PRT_GET"); };
std::string ubx::CFG::PRT_GET::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"portID\":" << std::to_string(data.portID);
    ret << "}";
    return ret.str();
}
uint8_t* ubx::CFG::PRT_GET::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::CFG::PRT_GET::getDataSize(void) const { return sizeof(data); }
uint8_t ubx::CFG::RATE::getClassId(void) const { return ubx::CFG::classID; }
uint8_t ubx::CFG::RATE::getMessageId(void) const { return messageID; }
const std::string &ubx::CFG::RATE::getClassName(void) const { return classIDName; }
std::string ubx::CFG::RATE::getMessageName(void) const { return std::string("RATE"); };
std::string ubx::CFG::RATE::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"measRate\":" << std::to_string(data.measRate) << ", \"navRate\":" << std::to_string(data.navRate) << ", \"timeRef\":" << std::to_string(data.timeRef);
    ret << "}";
    return ret.str();
}
uint8_t* ubx::CFG::RATE::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::CFG::RATE::getDataSize(void) const { return sizeof(data); }
uint8_t ubx::CFG::RXM::getClassId(void) const { return ubx::CFG::classID; }
uint8_t ubx::CFG::RXM::getMessageId(void) const { return messageID; }
const std::string &ubx::CFG::RXM::getClassName(void) const { return classIDName; }
std::string ubx::CFG::RXM::getMessageName(void) const { return std::string("RXM"); };
std::string ubx::CFG::RXM::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"reserved1\":" << "0" << ", \"lpMode\":" << std::to_string(data.lpMode);
    ret << "}";
    return ret.str();
}
uint8_t* ubx::CFG::RXM::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::CFG::RXM::getDataSize(void) const { return sizeof(data); }
uint8_t ubx::CFG::TP5::getClassId(void) const { return ubx::CFG::classID; }
uint8_t ubx::CFG::TP5::getMessageId(void) const { return messageID; }
const std::string &ubx::CFG::TP5::getClassName(void) const { return classIDName; }
std::string ubx::CFG::TP5::getMessageName(void) const { return std::string("TP5"); };
std::string ubx::CFG::TP5::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"tpIdx\":" << std::to_string(data.tpIdx) << ", \"version\":" << std::to_string(data.version) << ", \"reserved2\":" << "0" << ", \"antCableDelay\":" << std::to_string(data.antCableDelay) << ", \"rfGroupDelay\":" << std::to_string(data.rfGroupDelay) << ", \"freqPeriod\":" << std::to_string(data.freqPeriod) << ", \"freqPeriodLock\":" << std::to_string(data.freqPeriodLock) << ", \"pulseLenRatio\":" << std::to_string(data.pulseLenRatio) << ", \"pulseLenRatioLock\":" << std::to_string(data.pulseLenRatioLock) << ", \"userConfigDelay\":" << std::to_string(data.userConfigDelay) << ", \"flags\":" << std::to_string(data.flags);
    ret << "}";
    return ret.str();
}
uint8_t* ubx::CFG::TP5::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::CFG::TP5::getDataSize(void) const { return sizeof(data); }
uint8_t ubx::CFG::TP5_GET::getClassId(void) const { return ubx::CFG::classID; }
uint8_t ubx::CFG::TP5_GET::getMessageId(void) const { return messageID; }
const std::string &ubx::CFG::TP5_GET::getClassName(void) const { return classIDName; }
std::string ubx::CFG::TP5_GET::getMessageName(void) const { return std::string("TP5_GET"); };
std::string ubx::CFG::TP5_GET::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"tpIdx\":" << std::to_string(data.tpIdx);
    ret << "}";
    return ret.str();
}
uint8_t* ubx::CFG::TP5_GET::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::CFG::TP5_GET::getDataSize(void) const { return sizeof(data); }
