// File lang/cpp/src/messages/LOG.cpp
// Auto-generated by pyUBX generateCPP.py v0.2 on 2023-06-07T13:38:14.192858
// See https://github.com/mayeranalytics/pyUBX
// DO NOT MODIFY THIS FILE!

 #include "LOG.hpp"
#include <sstream>

const std::string classIDName("LOG");

uint8_t ubx::LOG::CREATE::getClassId(void) const { return ubx::LOG::classID; }
uint8_t ubx::LOG::CREATE::getMessageId(void) const { return messageID; }
const std::string &ubx::LOG::CREATE::getClassName(void) const { return classIDName; }
std::string ubx::LOG::CREATE::getMessageName(void) const { return std::string("CREATE"); };
std::string ubx::LOG::CREATE::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"version\":" << std::to_string(data.version) << ", \"logCfg\":" << std::to_string(data.logCfg) << ", \"_logCfg\":{\"circular\":" << std::to_string(data.logCfg_circular()) << "}" << ", \"reserved1\":" << "0" << ", \"logSize\":" << std::to_string(data.logSize) << ", \"userDefinedSize\":" << std::to_string(data.userDefinedSize);
    ret << "}";
    return ret.str();
}
uint8_t* ubx::LOG::CREATE::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::LOG::CREATE::getDataSize(void) const { return sizeof(data); }

void ubx::LOG::CREATE::_data::logCfg_circular(uint8_t val){ UBX_CHANGE_VAR_BIT(logCfg, val, LOG_CREATE_LOGCFG_CIRCULAR_MASK, LOG_CREATE_LOGCFG_CIRCULAR_OFFSET); }
uint8_t ubx::LOG::CREATE::_data::logCfg_circular()const{ return UBX_GET_VAR_BIT(logCfg, LOG_CREATE_LOGCFG_CIRCULAR_MASK, LOG_CREATE_LOGCFG_CIRCULAR_OFFSET); }
uint8_t ubx::LOG::ERASE::getClassId(void) const { return ubx::LOG::classID; }
uint8_t ubx::LOG::ERASE::getMessageId(void) const { return messageID; }
const std::string &ubx::LOG::ERASE::getClassName(void) const { return classIDName; }
std::string ubx::LOG::ERASE::getMessageName(void) const { return std::string("ERASE"); };
std::string ubx::LOG::ERASE::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << "}";
    return ret.str();
}
uint8_t* ubx::LOG::ERASE::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::LOG::ERASE::getDataSize(void) const { return 0; }
uint8_t ubx::LOG::FINDTIME::getClassId(void) const { return ubx::LOG::classID; }
uint8_t ubx::LOG::FINDTIME::getMessageId(void) const { return messageID; }
const std::string &ubx::LOG::FINDTIME::getClassName(void) const { return classIDName; }
std::string ubx::LOG::FINDTIME::getMessageName(void) const { return std::string("FINDTIME"); };
std::string ubx::LOG::FINDTIME::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"version\":" << std::to_string(data.version) << ", \"type\":" << std::to_string(data.type) << ", \"year\":" << std::to_string(data.year) << ", \"month\":" << std::to_string(data.month) << ", \"day\":" << std::to_string(data.day) << ", \"hour\":" << std::to_string(data.hour) << ", \"minute\":" << std::to_string(data.minute) << ", \"second\":" << std::to_string(data.second) << ", \"reserved1\":" << "0";
    ret << "}";
    return ret.str();
}
uint8_t* ubx::LOG::FINDTIME::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::LOG::FINDTIME::getDataSize(void) const { return sizeof(data); }
uint8_t ubx::LOG::FINDTIME_GET::getClassId(void) const { return ubx::LOG::classID; }
uint8_t ubx::LOG::FINDTIME_GET::getMessageId(void) const { return messageID; }
const std::string &ubx::LOG::FINDTIME_GET::getClassName(void) const { return classIDName; }
std::string ubx::LOG::FINDTIME_GET::getMessageName(void) const { return std::string("FINDTIME_GET"); };
std::string ubx::LOG::FINDTIME_GET::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"version\":" << std::to_string(data.version) << ", \"type\":" << std::to_string(data.type) << ", \"reserved1\":" << "0" << ", \"entryNumber\":" << std::to_string(data.entryNumber);
    ret << "}";
    return ret.str();
}
uint8_t* ubx::LOG::FINDTIME_GET::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::LOG::FINDTIME_GET::getDataSize(void) const { return sizeof(data); }
uint8_t ubx::LOG::INFO::getClassId(void) const { return ubx::LOG::classID; }
uint8_t ubx::LOG::INFO::getMessageId(void) const { return messageID; }
const std::string &ubx::LOG::INFO::getClassName(void) const { return classIDName; }
std::string ubx::LOG::INFO::getMessageName(void) const { return std::string("INFO"); };
std::string ubx::LOG::INFO::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << "}";
    return ret.str();
}
uint8_t* ubx::LOG::INFO::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::LOG::INFO::getDataSize(void) const { return 0; }
uint8_t ubx::LOG::INFO_GET::getClassId(void) const { return ubx::LOG::classID; }
uint8_t ubx::LOG::INFO_GET::getMessageId(void) const { return messageID; }
const std::string &ubx::LOG::INFO_GET::getClassName(void) const { return classIDName; }
std::string ubx::LOG::INFO_GET::getMessageName(void) const { return std::string("INFO_GET"); };
std::string ubx::LOG::INFO_GET::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"version\":" << std::to_string(data.version) << ", \"reserved1\":" << "0" << ", \"filestoreCapacity\":" << std::to_string(data.filestoreCapacity) << ", \"reserved2\":" << "0" << ", \"currentMaxLogSize\":" << std::to_string(data.currentMaxLogSize) << ", \"currentLogSize\":" << std::to_string(data.currentLogSize) << ", \"entryCount\":" << std::to_string(data.entryCount) << ", \"oldestYear\":" << std::to_string(data.oldestYear) << ", \"oldestMonth\":" << std::to_string(data.oldestMonth) << ", \"oldestDay\":" << std::to_string(data.oldestDay) << ", \"oldestHour\":" << std::to_string(data.oldestHour) << ", \"oldestMinute\":" << std::to_string(data.oldestMinute) << ", \"oldestSecond\":" << std::to_string(data.oldestSecond) << ", \"reserved3\":" << "0" << ", \"newestYear\":" << std::to_string(data.newestYear) << ", \"newestMonth\":" << std::to_string(data.newestMonth) << ", \"newestDay\":" << std::to_string(data.newestDay) << ", \"newestHour\":" << std::to_string(data.newestHour) << ", \"newestMinute\":" << std::to_string(data.newestMinute) << ", \"newestSecond\":" << std::to_string(data.newestSecond) << ", \"reserved4\":" << "0" << ", \"status\":" << std::to_string(data.status) << ", \"_status\":{\"recording\":" << std::to_string(data.status_recording()) << ", \"inactive\":" << std::to_string(data.status_inactive()) << ", \"circular\":" << std::to_string(data.status_circular()) << "}" << ", \"reserved5\":" << "0";
    ret << "}";
    return ret.str();
}
uint8_t* ubx::LOG::INFO_GET::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::LOG::INFO_GET::getDataSize(void) const { return sizeof(data); }

void ubx::LOG::INFO_GET::_data::status_recording(uint8_t val){ UBX_CHANGE_VAR_BIT(status, val, LOG_INFO_GET_STATUS_RECORDING_MASK, LOG_INFO_GET_STATUS_RECORDING_OFFSET); }
uint8_t ubx::LOG::INFO_GET::_data::status_recording()const{ return UBX_GET_VAR_BIT(status, LOG_INFO_GET_STATUS_RECORDING_MASK, LOG_INFO_GET_STATUS_RECORDING_OFFSET); }
void ubx::LOG::INFO_GET::_data::status_inactive(uint8_t val){ UBX_CHANGE_VAR_BIT(status, val, LOG_INFO_GET_STATUS_INACTIVE_MASK, LOG_INFO_GET_STATUS_INACTIVE_OFFSET); }
uint8_t ubx::LOG::INFO_GET::_data::status_inactive()const{ return UBX_GET_VAR_BIT(status, LOG_INFO_GET_STATUS_INACTIVE_MASK, LOG_INFO_GET_STATUS_INACTIVE_OFFSET); }
void ubx::LOG::INFO_GET::_data::status_circular(uint8_t val){ UBX_CHANGE_VAR_BIT(status, val, LOG_INFO_GET_STATUS_CIRCULAR_MASK, LOG_INFO_GET_STATUS_CIRCULAR_OFFSET); }
uint8_t ubx::LOG::INFO_GET::_data::status_circular()const{ return UBX_GET_VAR_BIT(status, LOG_INFO_GET_STATUS_CIRCULAR_MASK, LOG_INFO_GET_STATUS_CIRCULAR_OFFSET); }
uint8_t ubx::LOG::RETRIEVE::getClassId(void) const { return ubx::LOG::classID; }
uint8_t ubx::LOG::RETRIEVE::getMessageId(void) const { return messageID; }
const std::string &ubx::LOG::RETRIEVE::getClassName(void) const { return classIDName; }
std::string ubx::LOG::RETRIEVE::getMessageName(void) const { return std::string("RETRIEVE"); };
std::string ubx::LOG::RETRIEVE::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"startNumber\":" << std::to_string(data.startNumber) << ", \"entryCount\":" << std::to_string(data.entryCount) << ", \"version\":" << std::to_string(data.version) << ", \"reserved1\":" << "0";
    ret << "}";
    return ret.str();
}
uint8_t* ubx::LOG::RETRIEVE::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::LOG::RETRIEVE::getDataSize(void) const { return sizeof(data); }
uint8_t ubx::LOG::RETRIEVEPOS::getClassId(void) const { return ubx::LOG::classID; }
uint8_t ubx::LOG::RETRIEVEPOS::getMessageId(void) const { return messageID; }
const std::string &ubx::LOG::RETRIEVEPOS::getClassName(void) const { return classIDName; }
std::string ubx::LOG::RETRIEVEPOS::getMessageName(void) const { return std::string("RETRIEVEPOS"); };
std::string ubx::LOG::RETRIEVEPOS::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"entryIndex\":" << std::to_string(data.entryIndex) << ", \"lon\":" << std::to_string(data.lon) << ", \"lat\":" << std::to_string(data.lat) << ", \"hMSL\":" << std::to_string(data.hMSL) << ", \"hAcc\":" << std::to_string(data.hAcc) << ", \"gSpeed\":" << std::to_string(data.gSpeed) << ", \"heading\":" << std::to_string(data.heading) << ", \"version\":" << std::to_string(data.version) << ", \"fixType\":" << std::to_string(data.fixType) << ", \"year\":" << std::to_string(data.year) << ", \"month\":" << std::to_string(data.month) << ", \"day\":" << std::to_string(data.day) << ", \"hour\":" << std::to_string(data.hour) << ", \"minute\":" << std::to_string(data.minute) << ", \"second\":" << std::to_string(data.second) << ", \"reserved1\":" << "0" << ", \"numSV\":" << std::to_string(data.numSV) << ", \"reserved2\":" << "0";
    ret << "}";
    return ret.str();
}
uint8_t* ubx::LOG::RETRIEVEPOS::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::LOG::RETRIEVEPOS::getDataSize(void) const { return sizeof(data); }
uint8_t ubx::LOG::RETRIEVEPOSEXTRA::getClassId(void) const { return ubx::LOG::classID; }
uint8_t ubx::LOG::RETRIEVEPOSEXTRA::getMessageId(void) const { return messageID; }
const std::string &ubx::LOG::RETRIEVEPOSEXTRA::getClassName(void) const { return classIDName; }
std::string ubx::LOG::RETRIEVEPOSEXTRA::getMessageName(void) const { return std::string("RETRIEVEPOSEXTRA"); };
std::string ubx::LOG::RETRIEVEPOSEXTRA::getDescription(void) const {
    std::stringstream ret;
    ret << "{\"classId\":" << std::to_string(getClassId()) << ",\"messageId\":" << std::to_string(getMessageId()) << ",\"classIdName\":\"" << getClassName() << "\",\"messageIdName\":\"" << getMessageName() << "\"";
    ret << ", \"entryIndex\":" << std::to_string(data.entryIndex) << ", \"version\":" << std::to_string(data.version) << ", \"reserved1\":" << "0" << ", \"year\":" << std::to_string(data.year) << ", \"month\":" << std::to_string(data.month) << ", \"day\":" << std::to_string(data.day) << ", \"hour\":" << std::to_string(data.hour) << ", \"minute\":" << std::to_string(data.minute) << ", \"second\":" << std::to_string(data.second) << ", \"reserved2\":" << "0" << ", \"distance\":" << std::to_string(data.distance) << ", \"reserved3\":" << "0";
    ret << "}";
    return ret.str();
}
uint8_t* ubx::LOG::RETRIEVEPOSEXTRA::getDataStartAddress(void) const { return (uint8_t*)&data; }
uint16_t ubx::LOG::RETRIEVEPOSEXTRA::getDataSize(void) const { return sizeof(data); }
