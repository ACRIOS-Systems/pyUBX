// File lang/cpp/src/messages/RXM.hpp
// Auto-generated by pyUBX generateCPP.py v0.2 on 2023-06-06T19:57:04.621685
// See https://github.com/mayeranalytics/pyUBX
// DO NOT MODIFY THIS FILE!

#ifndef __RXM_H__
#define __RXM_H__
#include "Ubx.hpp"

/* Message class RXM.
 */
namespace ubx
{
namespace RXM {

constexpr uint8_t classID = 2;

/* Indoor Messaging System information
 */
struct __attribute__((packed)) IMES : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 97;

    struct __attribute__((packed)) _data {

    } data;
};


#define RXM_IMES_GET_REPEATED_POSITION1_1_POS1FLOOR_OFFSET (0)
#define RXM_IMES_GET_REPEATED_POSITION1_1_POS1FLOOR_MASK (255)
#define RXM_IMES_GET_REPEATED_POSITION1_1_POS1LAT_OFFSET (8)
#define RXM_IMES_GET_REPEATED_POSITION1_1_POS1LAT_MASK (2147483392)

#define RXM_IMES_GET_REPEATED_POSITION1_2_POS1LON_OFFSET (0)
#define RXM_IMES_GET_REPEATED_POSITION1_2_POS1LON_MASK (16777215)
#define RXM_IMES_GET_REPEATED_POSITION1_2_POS1VALID_OFFSET (24)
#define RXM_IMES_GET_REPEATED_POSITION1_2_POS1VALID_MASK (16777216)

#define RXM_IMES_GET_REPEATED_POSITION2_1_POS2FLOOR_OFFSET (0)
#define RXM_IMES_GET_REPEATED_POSITION2_1_POS2FLOOR_MASK (511)
#define RXM_IMES_GET_REPEATED_POSITION2_1_POS2ALT_OFFSET (9)
#define RXM_IMES_GET_REPEATED_POSITION2_1_POS2ALT_MASK (2096640)
#define RXM_IMES_GET_REPEATED_POSITION2_1_POS2ACC_OFFSET (21)
#define RXM_IMES_GET_REPEATED_POSITION2_1_POS2ACC_MASK (6291456)
#define RXM_IMES_GET_REPEATED_POSITION2_1_POS2VALID_OFFSET (23)
#define RXM_IMES_GET_REPEATED_POSITION2_1_POS2VALID_MASK (8388608)

#define RXM_IMES_GET_REPEATED_SHORTIDFRAME_SHORTID_OFFSET (0)
#define RXM_IMES_GET_REPEATED_SHORTIDFRAME_SHORTID_MASK (4095)
#define RXM_IMES_GET_REPEATED_SHORTIDFRAME_SHORTVALID_OFFSET (12)
#define RXM_IMES_GET_REPEATED_SHORTIDFRAME_SHORTVALID_MASK (4096)
#define RXM_IMES_GET_REPEATED_SHORTIDFRAME_SHORTBOUNDARY_OFFSET (13)
#define RXM_IMES_GET_REPEATED_SHORTIDFRAME_SHORTBOUNDARY_MASK (8192)

#define RXM_IMES_GET_REPEATED_MEDIUMID2_MEDIUMIDMSB_OFFSET (0)
#define RXM_IMES_GET_REPEATED_MEDIUMID2_MEDIUMIDMSB_MASK (1)
#define RXM_IMES_GET_REPEATED_MEDIUMID2_MEDIUMVALID_OFFSET (1)
#define RXM_IMES_GET_REPEATED_MEDIUMID2_MEDIUMVALID_MASK (2)
#define RXM_IMES_GET_REPEATED_MEDIUMID2_MEDIUMBOUNDARY_OFFSET (2)
#define RXM_IMES_GET_REPEATED_MEDIUMID2_MEDIUMBOUNDARY_MASK (4)
struct __attribute__((packed)) IMES_GET : public SerializeCommon
{
    uint16_t repeatedLen; /* Set N-count array dimension of repeated structure. Do not serialize this byte*/
    static const uint16_t repeatedSize;
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 97;

    struct __attribute__((packed)) _data {
        uint8_t numTx;
        uint8_t version;
        uint8_t reserved1[2];

        struct __attribute__((packed)) _repeated {
            uint8_t reserved2;
            uint8_t txId;
            uint8_t reserved3[3];
            uint8_t cno;
            uint8_t reserved4[2];
            int32_t doppler;
            uint32_t position1_1;
            uint32_t position1_2;
            uint32_t position2_1;
            int32_t lat;
            int32_t lon;
            uint32_t shortIdFrame;
            uint32_t mediumIdLSB;
            uint32_t mediumId2;
        } repeated [0]; /* [0] -> to pass compilation. Length is set by repeatedLen. Do not forget alloc enough space*/


        void repeated_position1_1_pos1Floor(uint8_t val, uint8_t n);
        uint8_t repeated_position1_1_pos1Floor(uint8_t n) const;
        void repeated_position1_1_pos1Lat(uint8_t val, uint8_t n);
        uint8_t repeated_position1_1_pos1Lat(uint8_t n) const;

        void repeated_position1_2_pos1Lon(uint8_t val, uint8_t n);
        uint8_t repeated_position1_2_pos1Lon(uint8_t n) const;
        void repeated_position1_2_pos1Valid(uint8_t val, uint8_t n);
        uint8_t repeated_position1_2_pos1Valid(uint8_t n) const;

        void repeated_position2_1_pos2Floor(uint8_t val, uint8_t n);
        uint8_t repeated_position2_1_pos2Floor(uint8_t n) const;
        void repeated_position2_1_pos2Alt(uint8_t val, uint8_t n);
        uint8_t repeated_position2_1_pos2Alt(uint8_t n) const;
        void repeated_position2_1_pos2Acc(uint8_t val, uint8_t n);
        uint8_t repeated_position2_1_pos2Acc(uint8_t n) const;
        void repeated_position2_1_pos2Valid(uint8_t val, uint8_t n);
        uint8_t repeated_position2_1_pos2Valid(uint8_t n) const;

        void repeated_shortIdFrame_shortId(uint8_t val, uint8_t n);
        uint8_t repeated_shortIdFrame_shortId(uint8_t n) const;
        void repeated_shortIdFrame_shortValid(uint8_t val, uint8_t n);
        uint8_t repeated_shortIdFrame_shortValid(uint8_t n) const;
        void repeated_shortIdFrame_shortBoundary(uint8_t val, uint8_t n);
        uint8_t repeated_shortIdFrame_shortBoundary(uint8_t n) const;

        void repeated_mediumId2_mediumIdMSB(uint8_t val, uint8_t n);
        uint8_t repeated_mediumId2_mediumIdMSB(uint8_t n) const;
        void repeated_mediumId2_mediumValid(uint8_t val, uint8_t n);
        uint8_t repeated_mediumId2_mediumValid(uint8_t n) const;
        void repeated_mediumId2_mediumboundary(uint8_t val, uint8_t n);
        uint8_t repeated_mediumId2_mediumboundary(uint8_t n) const;
    } data;
};

/* TODO: MISSING IMPLEMENTATION
 */
struct __attribute__((packed)) MEASX : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 20;

    struct __attribute__((packed)) _data {

    } data;
};


#define RXM_PMREQ_FLAGS_BACKUP_OFFSET (1)
#define RXM_PMREQ_FLAGS_BACKUP_MASK (2)
/* Power management request
 */
struct __attribute__((packed)) PMREQ : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 65;

    struct __attribute__((packed)) _data {
        uint32_t duration;
        uint32_t flags;


        void flags_backup(uint8_t val);
        uint8_t flags_backup() const;
    } data;
};


#define RXM_PMREQ2_FLAGS_BACKUP_OFFSET (1)
#define RXM_PMREQ2_FLAGS_BACKUP_MASK (2)
#define RXM_PMREQ2_FLAGS_FORCE_OFFSET (2)
#define RXM_PMREQ2_FLAGS_FORCE_MASK (4)

#define RXM_PMREQ2_WAKEUPSOURCES_UARTRX_OFFSET (3)
#define RXM_PMREQ2_WAKEUPSOURCES_UARTRX_MASK (8)
#define RXM_PMREQ2_WAKEUPSOURCES_EXTINT0_OFFSET (5)
#define RXM_PMREQ2_WAKEUPSOURCES_EXTINT0_MASK (32)
#define RXM_PMREQ2_WAKEUPSOURCES_EXTINT1_OFFSET (6)
#define RXM_PMREQ2_WAKEUPSOURCES_EXTINT1_MASK (64)
#define RXM_PMREQ2_WAKEUPSOURCES_SPICS_OFFSET (7)
#define RXM_PMREQ2_WAKEUPSOURCES_SPICS_MASK (128)
/* Power management request
 */
struct __attribute__((packed)) PMREQ2 : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 65;

    struct __attribute__((packed)) _data {
        uint8_t version;
        uint8_t reserved1[3];
        uint32_t duration;
        uint32_t flags;
        uint32_t wakeupSources;


        void flags_backup(uint8_t val);
        uint8_t flags_backup() const;
        void flags_force(uint8_t val);
        uint8_t flags_force() const;

        void wakeupSources_uartrx(uint8_t val);
        uint8_t wakeupSources_uartrx() const;
        void wakeupSources_extint0(uint8_t val);
        uint8_t wakeupSources_extint0() const;
        void wakeupSources_extint1(uint8_t val);
        uint8_t wakeupSources_extint1() const;
        void wakeupSources_spics(uint8_t val);
        uint8_t wakeupSources_spics() const;
    } data;
};

/* TODO: MISSING IMPLEMENTATION
 */
struct __attribute__((packed)) RAWX : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 21;

    struct __attribute__((packed)) _data {

    } data;
};

/* TODO: MISSING IMPLEMENTATION
 */
struct __attribute__((packed)) RLM : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 89;

    struct __attribute__((packed)) _data {

    } data;
};

/* TODO: MISSING IMPLEMENTATION
 */
struct __attribute__((packed)) RTCM : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 50;

    struct __attribute__((packed)) _data {

    } data;
};

/* TODO: MISSING IMPLEMENTATION
 */
struct __attribute__((packed)) SFRBX : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 19;

    struct __attribute__((packed)) _data {

    } data;
};

/* TODO: MISSING IMPLEMENTATION
 */
struct __attribute__((packed)) SVSI : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 32;

    struct __attribute__((packed)) _data {

    } data;
};

} // namespace RXM
} // namespace ubx
#endif // ifndef __RXM_H__
