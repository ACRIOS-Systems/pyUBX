// File lang/cpp/src/messages/ACK.hpp
// Auto-generated by pyUBX generateCPP.py v0.1 on 2023-04-08T18:03:13.542454
// See https://github.com/mayeranalytics/pyUBX
// DO NOT MODIFY THIS FILE!

#ifndef __ACK_H__
#define __ACK_H__
#include "Ubx.hpp"

/* Message class ACK.
 */
namespace ubx
{
namespace ACK {

constexpr uint8_t classID = 5;

struct __attribute__((packed)) ACK : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 1;

    struct __attribute__((packed)) _data {
        uint8_t clsID;
        uint8_t msgID;

    } data;
};

struct __attribute__((packed)) NAK : public SerializeCommon
{
    virtual uint8_t getClassId(void) const override;
    virtual uint8_t getMessageId(void) const override;
    virtual const std::string &getClassName(void) const override;
    virtual std::string getMessageName(void) const override;
    virtual std::string getDescription(void) const override;
    virtual uint8_t* getDataStartAddress(void) const override;
    virtual uint16_t getDataSize(void) const override;

    static constexpr uint8_t messageID = 0;

    struct __attribute__((packed)) _data {
        uint8_t clsID;
        uint8_t msgID;

    } data;
};

} // namespace ACK
} // namespace ubx
#endif // ifndef __ACK_H__
